{
  "openapi": "3.1.0",
  "info": {
    "title": "Cyoda API",
    "description": "API for Cyoda, providing access to entity management, search capabilities, SQL schema operations, and more.\n\n## Core Capabilities\n\n### Entity Management\nAPIs for managing entities including creation, updates, and statistics retrieval.\nAll changes are executed transactionally with collections processed in transactional batches.\n\n### Entity Model\nOperations for managing entity models, including import/export, versioning, and lifecycle management.\nSupports model locking/unlocking, change level control, and metadata conversion through various formats.\n\nModel Lifecycle Rules:\n- Entity models must be locked before any entities can be saved using that model\n- A locked model cannot be unlocked if there are existing entities in the database using that model\n- Models can only be deleted when unlocked and when no entities reference them\n\nChange Level Control:\nModels support hierarchical change levels (from least to most impactful):\n- ARRAY_LENGTH: Only allows UniTypeArray width increases\n- ARRAY_ELEMENTS: Permits MultiTypeArray changes without new types\n- TYPE: Allows type modifications\n- STRUCTURAL: Permits fundamental model changes\n\nWhen a change level is set, all less impactful changes are automatically allowed.\n\n### Search\nProvides endpoints for searching and retrieving entities using both synchronous and asynchronous approaches.\n\nKey Features:\n- Snapshot-based searches for large datasets\n- Real-time synchronous searches for immediate results\n- Point-in-time querying capabilities\n- Pagination support for large result sets\n\nSearch Methods:\n1. Snapshot Search (/snapshot/*):\n   - Creates a persistent snapshot of search results\n   - The query is distributed across the cluster of Cyoda processing nodes\n   - Horizontally scalable - query time decreases linearly with cluster size\n   - Supports asynchronous processing of large datasets\n   - Allows status monitoring and cancellation\n   - Results can be retrieved in pages\n   \n2. Direct Search (/{entityName}/{modelVersion}):\n   - Synchronous, in-memory search\n   - Designed for small to medium datasets\n   - Limited by maximum result set size (default: 1000, max: 10000)\n   - Non-distributed (executes on single node)\n   - Configurable timeout and result limits\n   - Returns immediate streaming results\n\nAll endpoints support:\n- Point-in-time queries using ISO 8601 datetime format\n- Complex search conditions using GroupConditionDto\n- Model-specific searches by entity name and version\n\n### SQL Schema\nOperations for managing SQL schemas and tables, including generation from entity models\nand configuration of database views.\n\n### Edge Messaging\nAPIs for handling edge message communication and processing.\n\n## Authentication\n\nThis API uses **OAuth 2.0 Client Credentials Grant** for machine-to-machine authentication.\n\n### Getting Started\n1. **Create a machine-to-machine (M2M) user** through the client management API (requires SUPER_USER role)\n2. **Obtain an access token** using the client credentials via the OAuth token endpoint\n3. **Authenticate requests** by including the access token in the Authorization header: `Bearer <access_token>`\n\n### Authentication Flow\n- **Technical User Management**: Create, list, reset credentials, and delete M2M clients for your organization\n- **Token Issuance**: Standard OAuth 2.0 client credentials flow - no prior authentication required\n- **Bearer Token Authentication**: All protected API endpoints require a valid JWT bearer token\n- **Role-Based Access Control**: Different endpoints require specific roles (USER, ADMIN, M2M, SUPER_USER)\n\n### User Account Management\n- **Account Information**: Retrieve current user account details, tenant information, and roles\n- **Subscription Management**: Access subscription information, limits, and feature toggles\n- **Multi-tenant Support**: All operations are scoped to the authenticated user's legal entity, a.k.a tenant\n\n### Security Features\n- **JWT Tokens**: Secure, stateless authentication with configurable expiration\n- **Role-based Authorization**: Access control based on user roles\n- **Tenant Isolation**: Data and operations are isolated by legal entity boundaries\n- **Credential Management**: Secure client secret generation and rotation capabilities",
    "contact": {
      "name": "Cyoda Support",
      "url": "https://cyoda.com",
      "email": "support@cyoda.com",
      "x-discord": "https://discord.gg/95rdAyBZr2"
    },
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost",
      "description": "Generated server url"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Entity Management",
      "description": "APIs for managing entities including creation, updates, and statistics retrieval.\n\nA note on transaction handling:\n* All changes are executed transactionally\n* Collections are processed in transactional batches defined by `transactionWindow`\n* Collections exceeding `transactionWindow` size are automatically split into multiple transactional batches"
    },
    {
      "name": "Search",
      "description": "\nProvides endpoints for searching and retrieving entities using both synchronous and asynchronous approaches.\n\nKey Features:\n- Snapshot-based searches for large datasets\n- Real-time synchronous searches for immediate results\n- Point-in-time querying capabilities\n- Pagination support for large result sets\n\nSearch Methods:\n1. Snapshot Search (/snapshot/*):\n   - Creates a persistent snapshot of search results\n   - The query is distributed across the cluster of Cyoda processing nodes\n   - Horizontally scalable - query time decreases linearly with cluster size\n   - Supports asynchronous processing of large datasets\n   - Allows status monitoring and cancellation\n   - Results can be retrieved in pages\n   \n2. Direct Search (/{entityName}/{modelVersion}):\n   - Synchronous, in-memory search\n   - Designed for small to medium datasets\n   - Limited by maximum result set size (default: 1000, max: 10000)\n   - Non-distributed (executes on single node)\n   - Configurable timeout and result limits\n   - Returns immediate streaming results\n\nAll endpoints support:\n- Point-in-time queries using ISO 8601 datetime format\n- Complex search conditions using GroupConditionDto\n- Model-specific searches by entity name and version\n"
    },
    {
      "name": "Entity model",
      "description": "\nOperations for managing entity models, including import/export, versioning, and lifecycle management. \nSupports model locking/unlocking, change level control, and metadata conversion through various formats. \n        \nModel Lifecycle Rules:\n- Entity models must be locked before any entities can be saved using that model\n- A locked model cannot be unlocked if there are existing entities in the database using that model\n- Models can only be deleted when unlocked and when no entities reference them\n\nChange Level Control:\nModels support hierarchical change levels (from least to most impactful):\n- ARRAY_LENGTH: Only allows UniTypeArray width increases\n- ARRAY_ELEMENTS: Permits MultiTypeArray changes without new types\n- TYPE: Allows type modifications\n- STRUCTURAL: Permits fundamental model changes\n\nWhen a change level is set, all less impactful changes are automatically allowed.\n    "
    },
    {
      "name": "SQL-Schema",
      "description": "Operations for managing SQL schemas and tables"
    }
  ],
  "paths": {
    "/account": {
      "get": {
        "tags": [
          "User, Account"
        ],
        "summary": "Retrieve information about the current user's account, including current subscription.",
        "description": "Fetch information related to the current user's account, such as legal entity, roles, and current subscription.",
        "operationId": "accountGet",
        "responses": {
          "200": {
            "description": "Current user's account information with current subscription details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccountInfoResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/account/subscriptions": {
      "get": {
        "tags": [
          "User, Account"
        ],
        "summary": "Retrieve all subscriptions available for the current user's legal entity.",
        "description": "Fetch all subscription details associated with the legal entity of the current user.",
        "operationId": "accountSubscriptionsGet",
        "responses": {
          "200": {
            "description": "Collection of all subscriptions for the user's legal entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionsResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients": {
      "get": {
        "tags": [
          "User, Machine"
        ],
        "summary": "List all M2M clients",
        "description": "Retrieves a list of all active machine-to-machine (M2M) clients (OAuth 2.0 clients) to the current legal entity.\nThese users authenticate via client credentials and act on behalf of applications, not humans.\n\nReturns the client IDs of all M2M clients that are currently active\nand available for authentication.\n\n**Authorization Required:** SUPER_USER role\n",
        "operationId": "listTechnicalUsers",
        "responses": {
          "200": {
            "description": "List of M2M clients returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TechnicalUserDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "User, Machine"
        ],
        "summary": "Create M2M client",
        "description": "Creates a new machine-to-machine (M2M)client for API authentication via OAuth 2.0.\n\nThe created user will have M2M role permissions, necessary for getting the bearer token.\n\n**Authorization Required:** SUPER_USER role\n",
        "operationId": "createTechnicalUser",
        "responses": {
          "200": {
            "description": "M2M client created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TechnicalUserCredentialsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients/{clientId}": {
      "delete": {
        "tags": [
          "User, Machine"
        ],
        "summary": "Delete a M2M client",
        "description": "Deletes a M2M client and invalidates all associated credentials.\n\nThis operation cannot be undone without a support ticket. Any applications using this client's\ncredentials will immediately lose access and must be reconfigured with new credentials.\n\n**Authorization Required:** SUPER_USER role\n",
        "operationId": "deleteTechnicalUser",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "The client ID of the M2M client to delete",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[A-Za-z0-9]+$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "M2M client deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteTechnicalUser200ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was invalid or malformed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "M2M client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients/{clientId}/secret": {
      "put": {
        "tags": [
          "User, Machine"
        ],
        "summary": "Reset M2M client secret",
        "description": "Generates a new client secret for an existing M2M client.\n\nThis operation invalidates the current client secret and generates a new one.\nAny applications using the old secret will need to be updated with the new credentials.\n\n**Authorization Required:** SUPER_USER role\n",
        "operationId": "resetTechnicalUserSecret",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "The client ID of the M2M client whose secret should be reset",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[A-Za-z0-9]+$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client secret reset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TechnicalUserCredentialsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was invalid or malformed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "M2M client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/entity/stats": {
      "get": {
        "tags": [
          "Entity Management"
        ],
        "summary": "Retrieve entity statistics",
        "description": "Returns statistics for entities grouped by model name and version.",
        "operationId": "getEntityStatistics",
        "parameters": [
          {
            "name": "pointInTime",
            "in": "query",
            "description": "The point-in-time for statistics in ISO 8601 format (e.g., '2035-01-01T12:00:00Z'). Defaults to current consistency time if not provided",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully",
            "content": {
              "application/json": {
                "example": [
                  {
                    "modelName": "nobel-prize",
                    "modelVersion": 1,
                    "state": "AWARDED",
                    "count": 976
                  },
                  {
                    "modelName": "nobel-prize",
                    "modelVersion": 1,
                    "state": "PENDING",
                    "count": 6
                  },
                  {
                    "modelName": "nobel-prize",
                    "modelVersion": 1,
                    "state": "REVOKED",
                    "count": 0
                  },
                  {
                    "modelName": "nobel-prize",
                    "modelVersion": 1,
                    "state": "DECLINED",
                    "count": 5
                  },
                  {
                    "modelName": "flight-ticket",
                    "modelVersion": 1,
                    "state": "RESERVED",
                    "count": 23456
                  },
                  {
                    "modelName": "flight-ticket",
                    "modelVersion": 1,
                    "state": "PAID",
                    "count": 5765456
                  },
                  {
                    "modelName": "flight-ticket",
                    "modelVersion": 1,
                    "state": "FLOWN",
                    "count": 4974636835
                  },
                  {
                    "modelName": "flight-ticket",
                    "modelVersion": 1,
                    "state": "NO-SHOW",
                    "count": 8933456
                  },
                  {
                    "modelName": "flight-ticket",
                    "modelVersion": 1,
                    "state": "CANCELLED",
                    "count": 23452345
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/entity/stats/states": {
      "get": {
        "tags": [
          "Entity Management"
        ],
        "summary": "Retrieve entity statistics by state",
        "description": "Returns statistics for entities grouped by model name, version, and state.",
        "operationId": "getEntityStatisticsByState",
        "parameters": [
          {
            "name": "pointInTime",
            "in": "query",
            "description": "The point-in-time for statistics in ISO 8601 format (e.g., '2035-01-01T12:00:00Z'). Defaults to current consistency time if not provided",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "states",
            "in": "query",
            "description": "Optional list of states for which to calculate statistics. If not provided, statistics will be calculated for all current workflow states",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics by state retrieved successfully",
            "content": {
              "application/json": {
                "example": [
                  {
                    "modelName": "nobel-prize",
                    "modelVersion": 1,
                    "state": "AWARDED",
                    "count": 976
                  },
                  {
                    "modelName": "nobel-prize",
                    "modelVersion": 1,
                    "state": "PENDING",
                    "count": 6
                  },
                  {
                    "modelName": "nobel-prize",
                    "modelVersion": 1,
                    "state": "REVOKED",
                    "count": 0
                  },
                  {
                    "modelName": "nobel-prize",
                    "modelVersion": 1,
                    "state": "DECLINED",
                    "count": 5
                  },
                  {
                    "modelName": "flight-ticket",
                    "modelVersion": 1,
                    "state": "RESERVED",
                    "count": 23456
                  },
                  {
                    "modelName": "flight-ticket",
                    "modelVersion": 1,
                    "state": "PAID",
                    "count": 5765456
                  },
                  {
                    "modelName": "flight-ticket",
                    "modelVersion": 1,
                    "state": "FLOWN",
                    "count": 4974636835
                  },
                  {
                    "modelName": "flight-ticket",
                    "modelVersion": 1,
                    "state": "NO-SHOW",
                    "count": 8933456
                  },
                  {
                    "modelName": "flight-ticket",
                    "modelVersion": 1,
                    "state": "CANCELLED",
                    "count": 23452345
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/entity/{entityId}": {
      "get": {
        "tags": [
          "Entity Management"
        ],
        "summary": "Get a  single entity",
        "description": "Get a single entity by id",
        "operationId": "getOneEntity",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "The unique identifier (UUID) of the entity to get",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "1d1e1b10-1155-11f0-bcd5-ae468cd3ed16"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "Nobel Prize Example": {
                    "description": "Nobel Prize Example",
                    "value": {
                      "category": "physics",
                      "laureates": [
                        {
                          "firstname": "John",
                          "surname": "Hopfield",
                          "id": "1037",
                          "motivation": "\"for foundational discoveries and inventions that enable machine learning with artificial neural networks\"",
                          "share": "2"
                        },
                        {
                          "firstname": "Geoffrey",
                          "surname": "Hinton",
                          "id": "1038",
                          "motivation": "\"for foundational discoveries and inventions that enable machine learning with artificial neural networks\"",
                          "share": "2"
                        }
                      ],
                      "year": "2024"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Not Found",
                  "status": 404,
                  "detail": "entity id=8f4b11e0-77ab-11f0-b6ab-ae468cd3ed16 not found",
                  "instance": "/api/entity/8f4b11e0-77ab-11f0-b6ab-ae468cd3ed16",
                  "properties": {
                    "entityId": "8f4b11e0-77ab-11f0-b6ab-ae468cd3ed16"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid UUID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Bad Request",
                  "status": 400,
                  "detail": "Invalid value 'not-a-uuid' for parameter 'entityId'",
                  "instance": "/api/entity/8f4b11e0-77ab-11f0-b6ab-ae468cd3ed16",
                  "properties": {
                    "parameter": "entityId",
                    "invalidValue": "not-a-uuid"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Entity Management"
        ],
        "summary": "Delete a single entity",
        "description": "Deletes a single entity by Id",
        "operationId": "deleteSingleEntity",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "The unique identifier (UUID) of the entity to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "Deleted a single nobel prize": {
                    "description": "Deleted a single nobel prize",
                    "value": {
                      "id": "bb4b8fe6-73bd-11f0-7f7f-7f7f7f7f7f7f",
                      "modelKey": {
                        "name": "nobel-prize",
                        "version": 4
                      },
                      "transactionId": "8f5c28e0-77ab-11f0-b6ab-ae468cd3ed16"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Not Found",
                  "status": 404,
                  "detail": "entity id=8f4b11e0-77ab-11f0-b6ab-ae468cd3ed16 not found",
                  "instance": "/api/entity/8f4b11e0-77ab-11f0-b6ab-ae468cd3ed16",
                  "properties": {
                    "entityId": "8f4b11e0-77ab-11f0-b6ab-ae468cd3ed16"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid UUID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Bad Request",
                  "status": 400,
                  "detail": "Invalid value 'not-a-uuid' for parameter 'entityId'",
                  "instance": "/api/entity/8f4b11e0-77ab-11f0-b6ab-ae468cd3ed16",
                  "properties": {
                    "parameter": "entityId",
                    "invalidValue": "not-a-uuid"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/entity/{entityName}/{modelVersion}": {
      "get": {
        "tags": [
          "Entity Management"
        ],
        "summary": "Get All Entities",
        "description": "\nRetrieves all entities for a given model name and version, with pagination support.\nResults are returned as a stream of JSON objects.\n\nCommon use cases:\n- Bulk data retrieval\n- Data migration\n- Reporting\n\nNote:\n- For large datasets, consider using the search API with snapshots instead.\n- To find out how many entities there are, use the entity statistics endpoints.\n        ",
        "operationId": "getAllEntities",
        "parameters": [
          {
            "name": "entityName",
            "in": "path",
            "description": "Name of the entity model to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 1024,
              "minLength": 1
            }
          },
          {
            "name": "modelVersion",
            "in": "path",
            "description": "Version number of the entity model",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of entities to return per page. Must be greater than 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            },
            "example": 20
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number to retrieve, starting from 1. Must be greater than 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            },
            "example": 1
          },
          {
            "name": "pointInTime",
            "in": "query",
            "description": "The point-in-time for loading the entities, in ISO 8601 format (e.g., '2035-01-01T12:00:00Z'). Defaults to the current consistency time of the system if not provided.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2035-01-01T12:00:00Z"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved entities",
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "type": "array",
                  "$ref": "#/components/schemas/JsonNode"
                },
                "examples": {
                  "Nobel Prize Winners": {
                    "description": "Nobel Prize Winners",
                    "value": {
                      "type": "ENTITY",
                      "data": {
                        "category": "physics",
                        "laureates": [
                          {
                            "firstname": "John",
                            "surname": "Hopfield",
                            "id": "1037",
                            "motivation": "\"for foundational discoveries and inventions that enable machine learning with artificial neural networks\"",
                            "share": "2"
                          },
                          {
                            "firstname": "Geoffrey",
                            "surname": "Hinton",
                            "id": "1038",
                            "motivation": "\"for foundational discoveries and inventions that enable machine learning with artificial neural networks\"",
                            "share": "2"
                          }
                        ],
                        "year": "2024"
                      },
                      "meta": {
                        "id": "e4f14c38-34b2-11b2-92cb-fa754528b475",
                        "state": "VALIDATED",
                        "creationDate": "2025-03-30T15:30:24.243Z",
                        "previousTransition": "VALIDATE"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "examples": {
                  "Invalid Page Size": {
                    "description": "Invalid Page Size",
                    "value": {
                      "type": "about:blank",
                      "title": "Bad Request",
                      "status": 400,
                      "detail": "Page size must be between 1 and 1000",
                      "instance": "/api/entity/nobel-prize/1"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "examples": {
                  "Model Not Found": {
                    "description": "Model Not Found",
                    "value": {
                      "type": "about:blank",
                      "title": "Not Found",
                      "status": 404,
                      "detail": "cannot find model entityName=submarine, version=1",
                      "instance": "/api/entity/submarine/1",
                      "properties": {
                        "entityName": "submarine",
                        "entityVersion": 1
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Entity Management"
        ],
        "summary": "Delete entities of a model and version",
        "description": "Deletes entities for a given model name and version which existed at the consistency time of the system when the request is launched by provided condition or all entities if condition is not provided.",
        "operationId": "deleteEntities",
        "parameters": [
          {
            "name": "entityName",
            "in": "path",
            "description": "Name of the entity model to delete",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 1024,
              "minLength": 1
            },
            "example": "nobel-prize"
          },
          {
            "name": "modelVersion",
            "in": "path",
            "description": "Version number of the entity model",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          },
          {
            "name": "transactionSize",
            "in": "query",
            "description": "Maximum number of entities to delete in a single transaction. Higher values may improve performance but increase memory usage.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1000
            },
            "example": 1000
          },
          {
            "name": "pointInTime",
            "in": "query",
            "description": "The point-in-time for selecting the entities for deletion, in ISO 8601 format (e.g., '2035-01-01T12:00:00Z'). Defaults to the consistency time of the system if not provided.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2035-01-01T12:00:00Z"
          },
          {
            "name": "verbose",
            "in": "query",
            "description": "Include the list of deleted entity IDs in the response. When false, only returns statistics.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "example": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbstractConditionDto"
              },
              "examples": {
                "Physics Nobel Prize Search": {
                  "summary": "Find VALIDATED physics Nobel prizes with neural networks research",
                  "description": "Physics Nobel Prize Search",
                  "value": {
                    "operator": "AND",
                    "conditions": [
                      {
                        "field": "state",
                        "operatorType": "EQUALS",
                        "value": "VALIDATED",
                        "type": "lifecycle"
                      },
                      {
                        "jsonPath": "$.category",
                        "operatorType": "EQUALS",
                        "value": "physics",
                        "type": "simple"
                      },
                      {
                        "jsonPath": "$.laureates[*].motivation",
                        "operatorType": "CONTAINS",
                        "value": "neural networks",
                        "type": "simple"
                      }
                    ],
                    "type": "group"
                  }
                },
                "Family Member Search": {
                  "summary": "Find married family members born after 1998",
                  "description": "Family Member Search",
                  "value": {
                    "operator": "AND",
                    "conditions": [
                      {
                        "jsonPath": "$.married",
                        "operatorType": "EQUALS",
                        "value": true,
                        "type": "simple"
                      },
                      {
                        "jsonPath": "$.birthdate",
                        "operatorType": "GREATER_OR_EQUAL",
                        "value": "1999-01-01",
                        "type": "simple"
                      }
                    ],
                    "type": "group"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deletion process was successful. In case there were entities that could not be deletedthe response will contain information about that",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreamDeleteResult"
                },
                "examples": {
                  "Entities deleted": {
                    "description": "Entities deleted",
                    "value": {
                      "entityModelClassId": "8f50de40-77ab-11f0-b6ab-ae468cd3ed16",
                      "ids": [
                        "8f50de4a-77ab-11f0-b6ab-ae468cd3ed16",
                        "8f50de54-77ab-11f0-b6ab-ae468cd3ed16",
                        "8f50de5e-77ab-11f0-b6ab-ae468cd3ed16"
                      ],
                      "deleteResult": {
                        "numberOfEntitites": 4,
                        "numberOfEntititesRemoved": 3,
                        "idToError": {
                          "8f50de68-77ab-11f0-b6ab-ae468cd3ed16": "Some error message"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "examples": {
                  "Model Not Found": {
                    "description": "Model Not Found",
                    "value": {
                      "type": "about:blank",
                      "title": "Not Found",
                      "status": 404,
                      "detail": "cannot find model entityName=submarine, version=1",
                      "instance": "/api/entity/submarine/1",
                      "properties": {
                        "entityName": "submarine",
                        "entityVersion": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid model name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "examples": {
                  "Model Name Too Long": {
                    "description": "Model Name Too Long",
                    "value": {
                      "type": "about:blank",
                      "title": "Bad Request",
                      "status": 400,
                      "detail": "String length of the schema name is outside of the bounds [1,1024]",
                      "instance": "/api/entity/very-long-entity-model-name/1"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/entity/{format}": {
      "put": {
        "tags": [
          "Entity Management"
        ],
        "summary": "Update Collection",
        "description": "\nUpdates a collection of entities. If any of the entities are not found,\nthe request will fail and no entities will be updated.\n        ",
        "operationId": "updateCollection",
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "description": "Format of the input payload",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "JSON",
                "XML"
              ]
            }
          },
          {
            "name": "transactionWindow",
            "in": "query",
            "description": "Maximum number of entities per transaction batch",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "transactionTimeoutMillis",
            "in": "query",
            "description": "Maximum time in milliseconds allowed for transaction completion",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 10000
            }
          },
          {
            "name": "waitForConsistencyAfter",
            "in": "query",
            "description": "If true, waits for consistency after operation completes",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "examples": {
                "Mixed Entity Updates": {
                  "summary": "Example of updating multiple entities of different types",
                  "description": "Mixed Entity Updates",
                  "value": [
                    {
                      "id": "8f42d480-77ab-11f0-b6ab-ae468cd3ed16",
                      "payload": "{\n  \"firstName\" : \"John\",\n  \"middleName\" : \"Henry\",\n  \"lastName\" : \"Doe\",\n  \"birthdate\" : \"1964-04-18\",\n  \"married\" : true,\n  \"children\" : [ {\n    \"firstName\" : \"Jane\",\n    \"middleName\" : \"Marie\",\n    \"lastName\" : \"Doe\",\n    \"birthdate\" : \"1990-08-25\",\n    \"married\" : false\n  }, {\n    \"firstName\" : \"James\",\n    \"middleName\" : \"Robert\",\n    \"lastName\" : \"Doe\",\n    \"birthdate\" : \"1992-03-15\",\n    \"married\" : true\n  } ]\n}",
                      "transition": "UPDATE"
                    },
                    {
                      "id": "8f45e1c0-77ab-11f0-b6ab-ae468cd3ed16",
                      "payload": "{\n  \"category\" : \"economics\",\n  \"laureates\" : [ {\n    \"firstname\" : \"Daron\",\n    \"surname\" : \"Acemoglu\",\n    \"id\" : \"1044\",\n    \"motivation\" : \"\\\"for studies of how institutions are formed and affect prosperity\\\"\",\n    \"share\" : \"3\"\n  }, {\n    \"firstname\" : \"Simon\",\n    \"surname\" : \"Johnson\",\n    \"id\" : \"1045\",\n    \"motivation\" : \"\\\"for studies of how institutions are formed and affect prosperity\\\"\",\n    \"share\" : \"3\"\n  }, {\n    \"firstname\" : \"James\",\n    \"surname\" : \"Robinson\",\n    \"id\" : \"1046\",\n    \"motivation\" : \"\\\"for studies of how institutions are formed and affect prosperity\\\"\",\n    \"share\" : \"3\"\n  } ],\n  \"year\" : \"2024\"\n}",
                      "transition": "UPDATE"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Collection updated successfully",
            "content": {
              "application/json": {
                "example": "1d1e1b10-1155-11f0-bcd5-ae468cd3ed16"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Entity Management"
        ],
        "summary": "Create Collection",
        "description": "\nSaves a collection of entities. Each entity can be from a different model and version.\n\nPath Parameters:\n- format: The format of the input payload (e.g., JSON, XML)\n\nRequest Body:\n- A list of CreatePayload objects, each containing entity data and model information\n        ",
        "operationId": "createCollection",
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "description": "Format of the input payload",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "JSON",
                "XML"
              ]
            },
            "example": "JSON"
          },
          {
            "name": "transactionWindow",
            "in": "query",
            "description": "Maximum number of entities per transaction batch",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "transactionTimeoutMillis",
            "in": "query",
            "description": "Maximum time in milliseconds allowed for transaction completion",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 10000
            }
          },
          {
            "name": "waitForConsistencyAfter",
            "in": "query",
            "description": "If true, waits for consistency after operation completes",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "format": "json"
              },
              "examples": {
                "Mixed Entity Collection": {
                  "summary": "Example of multiple entities of different types",
                  "description": "Mixed Entity Collection",
                  "value": [
                    {
                      "model": {
                        "name": "family",
                        "version": 1
                      },
                      "payload": "{\n  \"firstName\" : \"John\",\n  \"middleName\" : \"Henry\",\n  \"lastName\" : \"Doe\",\n  \"birthdate\" : \"1964-04-18\",\n  \"married\" : true,\n  \"children\" : [ {\n    \"firstName\" : \"Jane\",\n    \"middleName\" : \"Marie\",\n    \"lastName\" : \"Doe\",\n    \"birthdate\" : \"1990-08-25\",\n    \"married\" : false\n  }, {\n    \"firstName\" : \"James\",\n    \"middleName\" : \"Robert\",\n    \"lastName\" : \"Doe\",\n    \"birthdate\" : \"1992-03-15\",\n    \"married\" : true\n  } ]\n}"
                    },
                    {
                      "model": {
                        "name": "nobel-prize",
                        "version": 1
                      },
                      "payload": "{\n  \"category\" : \"economics\",\n  \"laureates\" : [ {\n    \"firstname\" : \"Daron\",\n    \"surname\" : \"Acemoglu\",\n    \"id\" : \"1044\",\n    \"motivation\" : \"\\\"for studies of how institutions are formed and affect prosperity\\\"\",\n    \"share\" : \"3\"\n  }, {\n    \"firstname\" : \"Simon\",\n    \"surname\" : \"Johnson\",\n    \"id\" : \"1045\",\n    \"motivation\" : \"\\\"for studies of how institutions are formed and affect prosperity\\\"\",\n    \"share\" : \"3\"\n  }, {\n    \"firstname\" : \"James\",\n    \"surname\" : \"Robinson\",\n    \"id\" : \"1046\",\n    \"motivation\" : \"\\\"for studies of how institutions are formed and affect prosperity\\\"\",\n    \"share\" : \"3\"\n  } ],\n  \"year\" : \"2024\"\n}"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Collection created successfully",
            "content": {
              "application/json": {
                "example": "1d1e1b10-1155-11f0-bcd5-ae468cd3ed16"
              }
            }
          }
        }
      }
    },
    "/entity/{format}/{entityId}/{transition}": {
      "put": {
        "tags": [
          "Entity Management"
        ],
        "summary": "Update Single",
        "description": "\nUpdates a single entity.\n\nPath Parameters:\n- format: The format of the input payload (e.g., JSON, XML)\n- entityId: The UUID of the entity to update\n- transition: The transition to apply to the entity\n\nRequest Body:\n- Entity data in the specified format\n            ",
        "operationId": "updateSingle",
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "description": "Format of the input payload",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "JSON",
                "XML"
              ]
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "description": "The unique identifier (UUID) of the entity to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "1d1e1b10-1155-11f0-bcd5-ae468cd3ed16"
          },
          {
            "name": "transition",
            "in": "path",
            "description": "The transition state to apply to the entity (e.g., 'UPDATE', 'PUBLISH')",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 1024,
              "minLength": 1
            },
            "example": "UPDATE"
          },
          {
            "name": "transactionTimeoutMillis",
            "in": "query",
            "description": "Maximum time in milliseconds allowed for transaction completion. Operation will fail if it takes longer than this timeout.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 10000
            },
            "example": 30000
          },
          {
            "name": "waitForConsistencyAfter",
            "in": "query",
            "description": "If true, waits for the consistency time to pass before responding. May increase response time but guarantees data consistency when returning, so that subsequent calls will see the updated data.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "example": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "format": "json"
              },
              "examples": {
                "JSON Example": {
                  "summary": "An example of a JSON request body",
                  "description": "JSON Example",
                  "value": {
                    "category": "physics",
                    "laureates": [
                      {
                        "firstname": "John",
                        "surname": "Hopfield",
                        "id": "1037",
                        "motivation": "\"for foundational discoveries and inventions that enable machine learning with artificial neural networks\"",
                        "share": "2"
                      },
                      {
                        "firstname": "Geoffrey",
                        "surname": "Hinton",
                        "id": "1038",
                        "motivation": "\"for foundational discoveries and inventions that enable machine learning with artificial neural networks\"",
                        "share": "2"
                      }
                    ],
                    "year": "2024"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Prize"
              },
              "examples": {
                "XML Example": {
                  "summary": "An example of an XML request body",
                  "description": "XML Example",
                  "value": "\n<PrizeDto>\n  <category>physics</category>\n  <laureates>\n    <laureates>\n      <firstname>John</firstname>\n      <surname>Hopfield</surname>\n      <id>1037</id>\n      <motivation>\"for foundational discoveries and inventions that enable machine learning with artificial neural networks\"</motivation>\n      <share>2</share>\n    </laureates>\n    <laureates>\n      <firstname>Geoffrey</firstname>\n      <surname>Hinton</surname>\n      <id>1038</id>\n      <motivation>\"for foundational discoveries and inventions that enable machine learning with artificial neural networks\"</motivation>\n      <share>2</share>\n    </laureates>\n  </laureates>\n  <year>2024</year>\n</PrizeDto>\n\n"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityTransactionResponseUUID"
                }
              }
            }
          }
        }
      }
    },
    "/entity/{format}/{entityName}/{modelVersion}": {
      "post": {
        "tags": [
          "Entity Management"
        ],
        "summary": "Create New",
        "description": "\nSaves a new entity or a collection of entities of the same type.\n\nPath Parameters:\n* format: The format of the input payload (e.g., JSON, XML)\n* entityName: The name of the entity model\n* modelVersion: The version number of the entity model\n\nRequest Body:\n- A string containing the entity data in the specified format\n        ",
        "operationId": "create",
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "description": "Format of the input payload",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "JSON",
                "XML"
              ]
            },
            "example": "JSON"
          },
          {
            "name": "entityName",
            "in": "path",
            "description": "Name of the entity model",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 1024,
              "minLength": 1
            }
          },
          {
            "name": "modelVersion",
            "in": "path",
            "description": "Version number of the entity model",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          },
          {
            "name": "transactionWindow",
            "in": "query",
            "description": "Maximum number of entities to process in a single transaction",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "transactionTimeoutMillis",
            "in": "query",
            "description": "Maximum time in milliseconds for transaction completion",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 10000
            }
          },
          {
            "name": "waitForConsistencyAfter",
            "in": "query",
            "description": "If true, waits for consistency after the operation completes",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "examples": {
                "Single JSON Object example": {
                  "summary": "Example of a single JSON Object",
                  "description": "Single JSON Object example",
                  "value": {
                    "category": "physics",
                    "laureates": [
                      {
                        "firstname": "John",
                        "surname": "Hopfield",
                        "id": "1037",
                        "motivation": "\"for foundational discoveries and inventions that enable machine learning with artificial neural networks\"",
                        "share": "2"
                      },
                      {
                        "firstname": "Geoffrey",
                        "surname": "Hinton",
                        "id": "1038",
                        "motivation": "\"for foundational discoveries and inventions that enable machine learning with artificial neural networks\"",
                        "share": "2"
                      }
                    ],
                    "year": "2024"
                  }
                },
                "JSON Array example": {
                  "summary": "Example of a collection of JSON Objects",
                  "description": "JSON Array example",
                  "value": [
                    {
                      "category": "physics",
                      "laureates": [
                        {
                          "firstname": "John",
                          "surname": "Hopfield",
                          "id": "1037",
                          "motivation": "\"for foundational discoveries and inventions that enable machine learning with artificial neural networks\"",
                          "share": "2"
                        },
                        {
                          "firstname": "Geoffrey",
                          "surname": "Hinton",
                          "id": "1038",
                          "motivation": "\"for foundational discoveries and inventions that enable machine learning with artificial neural networks\"",
                          "share": "2"
                        }
                      ],
                      "year": "2024"
                    },
                    {
                      "category": "economics",
                      "laureates": [
                        {
                          "firstname": "Daron",
                          "surname": "Acemoglu",
                          "id": "1044",
                          "motivation": "\"for studies of how institutions are formed and affect prosperity\"",
                          "share": "3"
                        },
                        {
                          "firstname": "Simon",
                          "surname": "Johnson",
                          "id": "1045",
                          "motivation": "\"for studies of how institutions are formed and affect prosperity\"",
                          "share": "3"
                        },
                        {
                          "firstname": "James",
                          "surname": "Robinson",
                          "id": "1046",
                          "motivation": "\"for studies of how institutions are formed and affect prosperity\"",
                          "share": "3"
                        }
                      ],
                      "year": "2024"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Entity created successfully",
            "content": {
              "application/json": {
                "example": "1d1e1b10-1155-11f0-bcd5-ae468cd3ed16"
              }
            }
          }
        }
      }
    },
    "/message/get/{messageId}": {
      "get": {
        "tags": [
          "Edge message"
        ],
        "summary": "Retrieve an edge message by ID",
        "description": "Fetches a stored edge message using its unique identifier, including all message metadata and payload",
        "operationId": "getMessage",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "Unique identifier of the message to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid-v1",
              "description": "Must be a version 1 (time-based) UUID"
            },
            "example": "825ba31c-0b5b-11f0-91f5-667325248341"
          }
        ],
        "responses": {
          "200": {
            "description": "Message successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeMessageDto"
                },
                "examples": {
                  "Nobel Prize Message": {
                    "description": "Nobel Prize Message",
                    "value": {
                      "header": {
                        "subject": "nobel.prize.events",
                        "contentType": "application/json",
                        "contentLength": 1024,
                        "contentEncoding": "UTF-8",
                        "messageId": "msg-nobel-2024-physics",
                        "userId": "nobel-committee",
                        "recipient": "scientific-community",
                        "replyTo": "announcements@nobelprize.org",
                        "correlationId": "nobel-2024-physics-announcement"
                      },
                      "metaData": {
                        "values": {},
                        "indexedValues": {}
                      },
                      "content": "{\n  \"eventType\" : \"nobel.prize.announced\",\n  \"timestamp\" : \"2024-10-09T12:00:00Z\",\n  \"data\" : {\n    \"category\" : \"physics\",\n    \"year\" : \"2024\",\n    \"laureates\" : [ {\n      \"firstname\" : \"John\",\n      \"surname\" : \"Hopfield\",\n      \"id\" : \"1037\",\n      \"motivation\" : \"for foundational discoveries and inventions that enable machine learning with artificial neural networks\",\n      \"share\" : \"2\"\n    }, {\n      \"firstname\" : \"Geoffrey\",\n      \"surname\" : \"Hinton\",\n      \"id\" : \"1038\",\n      \"motivation\" : \"for foundational discoveries and inventions that enable machine learning with artificial neural networks\",\n      \"share\" : \"2\"\n    } ]\n  }\n}"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Message not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Message Not Found": {
                    "description": "Message Not Found",
                    "value": {
                      "type": "about:blank",
                      "title": "Not Found",
                      "status": 404,
                      "detail": "message id=9d95f000-779f-11f0-858c-ae468cd3ed16 not found",
                      "instance": "/api/message/get/9d95f000-779f-11f0-858c-ae468cd3ed16",
                      "properties": {
                        "messageId": "9d95f000-779f-11f0-858c-ae468cd3ed16"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid UUID format or not a time-based UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Not a Time UUID": {
                    "description": "Not a Time UUID",
                    "value": {
                      "type": "about:blank",
                      "title": "Bad Request",
                      "status": 400,
                      "detail": "UUID 123e4567-e89b-12d3-a456-426614174000 is not a time-based UUID (version 1)",
                      "instance": "/api/message/get/123e4567-e89b-12d3-a456-426614174000",
                      "properties": {
                        "uuid": "123e4567-e89b-12d3-a456-426614174000"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/message/new/{subject}": {
      "post": {
        "tags": [
          "Edge message"
        ],
        "summary": "Send a new edge message",
        "description": "Creates and stores a new edge message with the provided payload and AMQP-aligned headers. The message is processed according to the specified parsing configuration and stored with a unique identifier.",
        "operationId": "newMessage",
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "description": "Message subject identifier",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9._-]{1,256}$"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "MIME type of the message payload",
            "required": true,
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "name": "Content-Length",
            "in": "header",
            "description": "Size of the message payload in bytes",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Content-Encoding",
            "in": "header",
            "description": "Character encoding of the payload",
            "required": false,
            "schema": {
              "type": "string",
              "default": "UTF-8"
            }
          },
          {
            "name": "X-Message-ID",
            "in": "header",
            "description": "Custom message identifier",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 1024,
              "minLength": 1
            }
          },
          {
            "name": "X-User-ID",
            "in": "header",
            "description": "ID of the message sender",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 1024,
              "minLength": 1
            }
          },
          {
            "name": "X-Recipient",
            "in": "header",
            "description": "Intended message recipient",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 1024,
              "minLength": 1
            }
          },
          {
            "name": "X-Reply-To",
            "in": "header",
            "description": "Reply-to address for responses",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 1024,
              "minLength": 1
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Correlation ID for message tracking",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 1024,
              "minLength": 1
            }
          },
          {
            "name": "transactionTimeoutMillis",
            "in": "query",
            "description": "Maximum time in milliseconds to wait for transaction completion",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 10000
            }
          }
        ],
        "requestBody": {
          "description": "\nThe request body can be either a single JSON object or an array of homomorphic JSON objects.\nEach object must contain a 'payload' field with any valid JSON content.\nIt may also optionally include meta-data fields with a Flat set of key-value pairs.\nThe meta-data is indexed to enable fast searching by meta-data.\n\nThe message will be processed and stored according to this structure.\n            ",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              },
              "examples": {
                "Nobel Prize Announcement": {
                  "description": "Nobel Prize Announcement",
                  "value": {
                    "eventType": "nobel.prize.announced",
                    "timestamp": "2024-10-09T12:00:00Z",
                    "data": {
                      "category": "physics",
                      "year": "2024",
                      "laureates": [
                        {
                          "firstname": "John",
                          "surname": "Hopfield",
                          "id": "1037",
                          "motivation": "for foundational discoveries and inventions that enable machine learning with artificial neural networks",
                          "share": "2"
                        },
                        {
                          "firstname": "Geoffrey",
                          "surname": "Hinton",
                          "id": "1038",
                          "motivation": "for foundational discoveries and inventions that enable machine learning with artificial neural networks",
                          "share": "2"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message successfully created and stored",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "Transaction Response": {
                    "description": "Transaction Response",
                    "value": {
                      "entityIds": [
                        "9d95f000-779f-11f0-858c-ae468cd3ed16"
                      ],
                      "success": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid message format or parsing error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "examples": {
                  "Invalid Message Format": {
                    "description": "Invalid Message Format",
                    "value": {
                      "type": "about:blank",
                      "title": "Bad Request",
                      "status": 400,
                      "detail": "Invalid JSON format in message payload",
                      "instance": "/api/message/new/nobel.prize.events",
                      "properties": {
                        "error": "Unexpected character at position 15"
                      }
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload too large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "examples": {
                  "Payload Too Large": {
                    "description": "Payload Too Large",
                    "value": {
                      "type": "about:blank",
                      "title": "Payload Too Large",
                      "status": 413,
                      "detail": "Request payload size exceeds maximum allowed limit of 10MB",
                      "instance": "/api/message/new/nobel.prize.events"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/model/": {
      "get": {
        "tags": [
          "Entity model"
        ],
        "summary": "List Available Entity Models",
        "description": "\nRetrieves a list of all available entity models in the system.\n\nEach model in the response includes its identifier, name, version,\ncurrent state (LOCKED/UNLOCKED), and last modification timestamp.\n\nPaging and searching are not yet supported.\n        ",
        "operationId": "getAvailableEntityModels",
        "responses": {
          "200": {
            "description": "List of available entity models",
            "content": {
              "application/json": {
                "examples": {
                  "models": {
                    "description": "models",
                    "value": [
                      {
                        "id": "1f8a6fb0-77a9-11f0-8f30-ae468cd3ed16",
                        "modelName": "nobel-prize",
                        "modelVersion": 1,
                        "currentState": "LOCKED",
                        "modelUpdateDate": "2025-08-02T11:21:11.101576-07:00"
                      },
                      {
                        "id": "1f8d2ed0-77a9-11f0-8f30-ae468cd3ed16",
                        "modelName": "family-member",
                        "modelVersion": 3,
                        "currentState": "UNLOCKED",
                        "modelUpdateDate": "2025-08-12T11:21:11.101631-07:00"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/model/export/{converter}/{entityName}/{modelVersion}": {
      "get": {
        "tags": [
          "Entity model"
        ],
        "summary": "Export Entity Model Metadata",
        "description": "\nExports an entity model's metadata in the specified format.\n\nPath Parameters:\n- converter: The format to export to (e.g., JSON_SCHEMA, SIMPLE_VIEW)\n- entityName: The name of the entity model to export\n- modelVersion: The version number of the model\n\nThe response format depends on the chosen converter:\n- JSON_SCHEMA: Returns a JSON Schema representation\n- SIMPLE_VIEW: Returns a simplified view of the model structure\n        ",
        "operationId": "exportMetadata",
        "parameters": [
          {
            "name": "entityName",
            "in": "path",
            "description": "The model name of the entity",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "nobel-prize"
          },
          {
            "name": "modelVersion",
            "in": "path",
            "description": "The model version",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 3
          },
          {
            "name": "converter",
            "in": "path",
            "description": "The type converter to use",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "JSON_SCHEMA",
                "SIMPLE_VIEW"
              ]
            },
            "example": "SIMPLE_VIEW"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully exported model metadata",
            "content": {
              "application/json": {
                "examples": {
                  "Simple View": {
                    "summary": "SIMPLE_VIEW export example",
                    "description": "Simple View",
                    "value": {
                      "currentState": "LOCKED",
                      "model": {
                        "$": {
                          ".category": "STRING",
                          ".year": "STRING"
                        },
                        "$.laureates[*]": {
                          ".firstname": "STRING",
                          ".id": "STRING",
                          ".motivation": "STRING",
                          ".share": "STRING",
                          ".surname": "STRING",
                          "#": "ARRAY_ELEMENT"
                        }
                      }
                    }
                  },
                  "Json Schema": {
                    "summary": "JSON_SCHEMA export example",
                    "description": "Json Schema",
                    "value": {
                      "currentState": "LOCKED",
                      "model": {
                        "type": "object",
                        "properties": {
                          "category": {
                            "type": "string"
                          },
                          "year": {
                            "type": "string"
                          },
                          "laureates": {
                            "type": "array",
                            "prefixItems": [
                              {
                                "firstname": {
                                  "type": "string"
                                },
                                "share": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "surname": {
                                  "type": "string"
                                },
                                "motivation": {
                                  "type": "string"
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid converter specified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Bad Request",
                  "status": 400,
                  "detail": "Invalid value 'WRONG' for parameter 'converter'",
                  "instance": "/api/model/export/WRONG/nobel-prize/2",
                  "properties": {
                    "parameter": "converter",
                    "invalidValue": "WRONG"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Not Found",
                  "status": 404,
                  "detail": "cannot find model entityName=nobel-prize, version=2",
                  "instance": "/api/model/export/SIMPLE_VIEW/nobel-prize/2",
                  "properties": {
                    "entityName": "nobel-prize",
                    "entityVersion": 2
                  }
                }
              }
            }
          }
        }
      }
    },
    "/model/import/{dataFormat}/{converter}/{entityName}/{modelVersion}": {
      "post": {
        "tags": [
          "Entity model"
        ],
        "summary": "Import Entity Model",
        "description": "\nImports or updates an entity model from the provided data.\n\nPath Parameters:\n- dataFormat: The format of the input data (e.g., JSON, XML)\n- converter: The type converter to use for processing the data (SAMPLE_DATA, JSON_SCHEMA, SIMPLE_VIEW)\n- entityName: The name for the entity model\n- modelVersion: The version number for the model\n\nReturns the UUID of the created/updated entity model.\n        ",
        "operationId": "importEntityModel",
        "parameters": [
          {
            "name": "entityName",
            "in": "path",
            "description": "The model name of the entity",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "nobel-prize"
          },
          {
            "name": "modelVersion",
            "in": "path",
            "description": "The version number for the model",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          },
          {
            "name": "converter",
            "in": "path",
            "description": "The type converter to use for processing the data",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "SAMPLE_DATA",
                "JSON_SCHEMA",
                "SIMPLE_VIEW"
              ]
            },
            "example": "SAMPLE_DATA"
          },
          {
            "name": "dataFormat",
            "in": "path",
            "description": "The format of the input data",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "JSON",
                "XML"
              ]
            },
            "example": "JSON"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "examples": {
                "Nobel Prize Model": {
                  "summary": "Example of a Nobel Prize entity model",
                  "description": "Nobel Prize Model",
                  "value": {
                    "category": "physics",
                    "laureates": [
                      {
                        "firstname": "John",
                        "surname": "Hopfield",
                        "id": "1037",
                        "motivation": "\"for foundational discoveries and inventions that enable machine learning with artificial neural networks\"",
                        "share": "2"
                      },
                      {
                        "firstname": "Geoffrey",
                        "surname": "Hinton",
                        "id": "1038",
                        "motivation": "\"for foundational discoveries and inventions that enable machine learning with artificial neural networks\"",
                        "share": "2"
                      }
                    ],
                    "year": "2024"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Model successfully imported",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                },
                "example": "1d1e1b10-1155-11f0-bcd5-ae468cd3ed16"
              }
            }
          },
          "400": {
            "description": "Invalid converter specified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Bad Request",
                  "status": 400,
                  "detail": "Invalid value 'WRONG' for parameter 'converter'",
                  "instance": "/api/model/import/WRONG/nobel-prize/2",
                  "properties": {
                    "parameter": "converter",
                    "invalidValue": "WRONG"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/model/{entityName}/{modelVersion}": {
      "delete": {
        "tags": [
          "Entity model"
        ],
        "summary": "Delete Entity Model",
        "description": "\nDeletes an entity model if it meets deletion criteria.\n\nRequirements for deletion:\n- Model must be in UNLOCKED state\n- No entities can reference this model in the database\n\nPath Parameters:\n- entityName: The name of the entity model to delete\n- modelVersion: The version number of the model\n\nReturns a confirmation message upon successful deletion.\n",
        "operationId": "deleteEntityModel",
        "parameters": [
          {
            "name": "entityName",
            "in": "path",
            "description": "The model name of the entity",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "nobel-prize"
          },
          {
            "name": "modelVersion",
            "in": "path",
            "description": "The version number of the model",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Confirmation of successful deletion",
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "description": "success",
                    "value": "model nobel-prize:1 deleted"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Not Found",
                  "status": 404,
                  "detail": "cannot find model entityName=nobel-prize, version=2",
                  "instance": "/api/model/nobel-prize/2",
                  "properties": {
                    "entityName": "nobel-prize",
                    "entityVersion": 2
                  }
                }
              }
            }
          }
        }
      }
    },
    "/model/{entityName}/{modelVersion}/changeLevel/{changeLevel}": {
      "post": {
        "tags": [
          "Entity model"
        ],
        "summary": "Set Entity Model Change Level",
        "description": "\nSets or updates the allowed change level for a locked entity model.\n\nPath Parameters:\n- entityName: The name of the entity model\n- modelVersion: The version number of the model\n- changeLevel: The desired change level (ARRAY_LENGTH, ARRAY_ELEMENTS, TYPE, STRUCTURAL) or null to disallow changes\n\nChange levels are hierarchical - allowing a specific level automatically allows all less impactful levels:\n1. ARRAY_LENGTH: Only permits increases in UniTypeArray width\n2. ARRAY_ELEMENTS: Allows MultiTypeArray changes without new types\n3. TYPE: Permits modifications to existing types\n4. STRUCTURAL: Allows fundamental model changes\n\nNote: Setting a change level is only meaningful for locked models. An unlocked model always allows all changes.\n        ",
        "operationId": "setEntityModelChangeLevel",
        "parameters": [
          {
            "name": "entityName",
            "in": "path",
            "description": "The model name of the entity",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "nobel-prize"
          },
          {
            "name": "modelVersion",
            "in": "path",
            "description": "The version number of the model",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          },
          {
            "name": "changeLevel",
            "in": "path",
            "description": "\nThe allowed change level for the model.\nSet to null to disallow all changes.\nValid values: ARRAY_LENGTH, ARRAY_ELEMENTS, TYPE, STRUCTURAL\n            ",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ARRAY_LENGTH",
                "ARRAY_ELEMENTS",
                "TYPE",
                "STRUCTURAL"
              ]
            },
            "example": "TYPE"
          }
        ],
        "responses": {
          "200": {
            "description": "Change level successfully updated",
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "description": "success",
                    "value": "model nobel-prize:1 now at change level ARRAY_ELEMENTS"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Not Found",
                  "status": 404,
                  "detail": "cannot find model entityName=nobel-prize, version=2",
                  "instance": "/api/model/nobel-prize/2/changeLevel/STRUCTURAL",
                  "properties": {
                    "entityName": "nobel-prize",
                    "entityVersion": 2
                  }
                }
              }
            }
          }
        }
      }
    },
    "/model/{entityName}/{modelVersion}/lock": {
      "put": {
        "tags": [
          "Entity model"
        ],
        "summary": "Lock Entity Model",
        "description": "\nLocks an entity model to prevent further modifications.\n\nPath Parameters:\n- entityName: The name of the entity model to lock\n- modelVersion: The version number of the model\n\nReturns a confirmation message upon successful locking.\nOnce locked, a model cannot be modified unless explicitly unlocked or a change level is set.\n        ",
        "operationId": "lockEntityModel",
        "parameters": [
          {
            "name": "entityName",
            "in": "path",
            "description": "The model name of the entity",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "nobel-prize"
          },
          {
            "name": "modelVersion",
            "in": "path",
            "description": "The version number of the model",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Model successfully locked",
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "description": "success",
                    "value": "Model nobel-prize:1 locked"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Not Found",
                  "status": 404,
                  "detail": "cannot find model entityName=nobel-prize, version=2",
                  "instance": "/api/model/nobel-prize/2/lock",
                  "properties": {
                    "entityName": "nobel-prize",
                    "entityVersion": 2
                  }
                }
              }
            }
          }
        }
      }
    },
    "/model/{entityName}/{modelVersion}/unlock": {
      "put": {
        "tags": [
          "Entity model"
        ],
        "summary": "Unlock Entity Model",
        "description": "\nAttempts to unlock a locked entity model.\n\nRequirements for unlocking:\n- No entities can reference this model in the database\n- Model must be in LOCKED state\n\nPath Parameters:\n- entityName: The name of the entity model to unlock\n- modelVersion: The version number of the model\n\nThe operation will fail if there are any entities in the database using this model.\n        ",
        "operationId": "unlockEntityModel",
        "parameters": [
          {
            "name": "entityName",
            "in": "path",
            "description": "The model name of the entity",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "nobel-prize"
          },
          {
            "name": "modelVersion",
            "in": "path",
            "description": "The version number of the model",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Model successfully unlocked",
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "description": "success",
                    "value": "Model nobel-prize:1 unlocked"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Not Found",
                  "status": 404,
                  "detail": "cannot find model entityName=nobel-prize, version=2",
                  "instance": "/api/model/nobel-prize/2/unlock",
                  "properties": {
                    "entityName": "nobel-prize",
                    "entityVersion": 2
                  }
                }
              }
            }
          }
        }
      }
    },
    "/model/{entityName}/{modelVersion}/workflow/export": {
      "get": {
        "tags": [
          "Entity Model, Workflow"
        ],
        "summary": "Export entity workflows",
        "description": "Exports all workflow configurations for a specific entity type.\n\nSince one entity type can have multiple workflows (selected by workflow-level conditions),\nthis endpoint returns a collection of all workflows configured for the entity type.\n",
        "operationId": "exportEntityModelWorkflow",
        "parameters": [
          {
            "name": "entityName",
            "in": "path",
            "description": "Name of the entity model",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modelVersion",
            "in": "path",
            "description": "Version of the entity model",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workflows exported successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowExportResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Entity model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/model/{entityName}/{modelVersion}/workflow/import": {
      "post": {
        "tags": [
          "Entity Model, Workflow"
        ],
        "summary": "Import entity workflow",
        "description": "Imports or updates workflow configurations for a specific entity type.\n\nSince workflow name must be unique per entity model, this endpoint will either create\nnew workflow or update existing workflow with the same name.\n\nThe workflow configuration structure is defined by versioned schemas and may vary\ndepending on the version specified in the configuration.\n",
        "operationId": "importEntityModelWorkflow",
        "parameters": [
          {
            "name": "entityName",
            "in": "path",
            "description": "Name of the entity model",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modelVersion",
            "in": "path",
            "description": "Version of the entity model",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowImportRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Workflows imported successfully",
            "content": {}
          },
          "400": {
            "description": "Invalid workflow configuration data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Entity model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/oauth/token": {
      "post": {
        "tags": [
          "User, Machine"
        ],
        "summary": "Obtain access token for M2M client",
        "description": "Authenticates a M2M client using client credentials and returns an access token.\n\nThis endpoint implements the standard OAuth 2.0 Client Credentials Grant, designed for\nmachine-to-machine authentication. The client must authenticate using HTTP Basic Authentication,\nwhere the client_id and client_secret are provided in the Authorization header.\n\nThe returned access token can be used to authenticate subsequent API requests using the Bearer token scheme.\n\n**Note:** This endpoint does not require an existing access token, as it serves as the authentication entry point.\n",
        "operationId": "getTechnicalUserToken",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "string",
                "description": "Must be 'client_credentials'",
                "enum": [
                  "client_credentials"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access token issued successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid credentials or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid client credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/search/snapshot/{entityName}/{modelVersion}": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Create Search Snapshot",
        "description": "\nCreates a persistent snapshot of search results for large datasets.\n\nThis endpoint initiates an asynchronous search operation that:\n1. Validates the search criteria against the specified entity model\n2. Creates a persistent snapshot of matching entities\n3. Returns a UUID that can be used to:\n   - Monitor the snapshot creation progress (/snapshot/{snapshotId}/status)\n   - Retrieve paginated results (/snapshot/{snapshotId})\n   - Cancel the snapshot creation if needed (/snapshot/{snapshotId}/cancel)\n\nSnapshots are temporary and have a limited lifetime:\n- Each snapshot has an automatic expiration date\n- Expired snapshots are automatically deleted by the system\n- The expiration date can be retrieved using GET /snapshot/{snapshotId}/status\n- Plan to retrieve your data before the snapshot expires\n\nThe snapshot creation process runs in the background, allowing handling of large datasets\nwithout timeout concerns.\n\nIf no request body is provided or an empty request body is sent, all entities of the specified model and version will be included in the snapshot.\n\nQuery Structure:\nThe search condition is a tree of predicates that can include:\n1. Simple conditions - search within entity data using JSONPath\n2. Lifecycle conditions - search based on entity lifecyle (state, creationDate, previousTransition)\n3. Group conditions - combine multiple conditions with AND/OR operators\n\nOperator Types (Predicates)\nAvailable Operations:\n\n1. Basic Comparison\n- EQUALS: Exact match\n- NOT_EQUAL: Non-matching values\n- IS_NULL, NOT_NULL: Null checks\n- GREATER_THAN, LESS_THAN: Numeric/date comparisons\n- GREATER_OR_EQUAL, LESS_OR_EQUAL: Inclusive comparisons\n- BETWEEN, BETWEEN_INCLUSIVE: Range checks\n\n2. String Operations (Case-Sensitive)\n- CONTAINS: Substring match\n- NOT_CONTAINS: Negative substring match\n- STARTS_WITH, NOT_STARTS_WITH: Prefix matching\n- ENDS_WITH, NOT_ENDS_WITH: Suffix matching\n- MATCHES_PATTERN: Regular expression match\n- LIKE: SQL-style pattern matching\n\n3. Case-Insensitive String Operations\n- IEQUALS, INOT_EQUAL: Case-insensitive equality\n- ICONTAINS, INOT_CONTAINS: Case-insensitive substring\n- ISTARTS_WITH, INOT_STARTS_WITH: Case-insensitive prefix\n- IENDS_WITH, INOT_ENDS_WITH: Case-insensitive suffix\n\n4. State Tracking\n- IS_UNCHANGED: Field hasn't changed\n- IS_CHANGED: Field has changed\n        ",
        "operationId": "saveSnapshotWithData",
        "parameters": [
          {
            "name": "pointInTime",
            "in": "query",
            "description": "The point-in-time for the report, in ISO 8601 format (e.g., '2035-01-01T12:00:00Z'). Defaults to the current consistency time of the system if not provided.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2035-01-01T12:00:00Z"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbstractConditionDto"
              },
              "examples": {
                "Physics Nobel Prize Search": {
                  "summary": "Find VALIDATED physics Nobel prizes with neural networks research",
                  "description": "Physics Nobel Prize Search",
                  "value": {
                    "operator": "AND",
                    "conditions": [
                      {
                        "field": "state",
                        "operatorType": "EQUALS",
                        "value": "VALIDATED",
                        "type": "lifecycle"
                      },
                      {
                        "jsonPath": "$.category",
                        "operatorType": "EQUALS",
                        "value": "physics",
                        "type": "simple"
                      },
                      {
                        "jsonPath": "$.laureates[*].motivation",
                        "operatorType": "CONTAINS",
                        "value": "neural networks",
                        "type": "simple"
                      }
                    ],
                    "type": "group"
                  }
                },
                "Family Member Search": {
                  "summary": "Find married family members born after 1998",
                  "description": "Family Member Search",
                  "value": {
                    "operator": "AND",
                    "conditions": [
                      {
                        "jsonPath": "$.married",
                        "operatorType": "EQUALS",
                        "value": true,
                        "type": "simple"
                      },
                      {
                        "jsonPath": "$.birthdate",
                        "operatorType": "GREATER_OR_EQUAL",
                        "value": "1999-01-01",
                        "type": "simple"
                      }
                    ],
                    "type": "group"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Snapshot creation initiated successfully. Note that the snapshot will expire after a certain period.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                },
                "example": "3fa94f40-0cc0-11f0-ac28-ae468cd3ed16"
              }
            }
          },
          "404": {
            "description": "Entity model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Not Found",
                  "status": 404,
                  "detail": "cannot find model entityName=nobel-prize, version=2",
                  "instance": "/api/search/snapshot/nobel-prize/2",
                  "properties": {
                    "entityName": "nobel-prize",
                    "entityVersion": 2
                  }
                }
              }
            }
          }
        }
      }
    },
    "/search/snapshot/{snapshotId}": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Retrieve paginated results from a search snapshot",
        "description": "\nRetrieves a page of results from a previously created search snapshot. \nTo find out how many entities were found, call the snapshot creation status endpoint.\n\nThe results are sorted in descending order by entity id.\n\nThe results are returned in a paginated format, with:\n- Configurable page size (default: 10)\n- Zero-based page numbering\n- Optional point-in-time specification for the data being retrieved\n        ",
        "operationId": "getSnapshotResults",
        "parameters": [
          {
            "name": "snapshotId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pointInTime",
            "in": "query",
            "description": "The point-in-time for loading the entities, in ISO 8601 format (e.g., '2035-01-01T12:00:00Z'). Defaults to the point-in-time of the report if not provided.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2035-01-01T12:00:00Z"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved page of results",
            "content": {
              "application/json": {
                "example": {
                  "content": [
                    {
                      "type": "ENTITY",
                      "data": {
                        "category": "physics",
                        "year": "2024",
                        "laureates": [
                          {
                            "firstname": "John",
                            "surname": "Hopfield",
                            "id": "1037",
                            "motivation": "\"for foundational discoveries and inventions that enable machine learning with artificial neural networks\"",
                            "share": "2"
                          },
                          {
                            "firstname": "Geoffrey",
                            "surname": "Hinton",
                            "id": "1038",
                            "motivation": "\"for foundational discoveries and inventions that enable machine learning with artificial neural networks\"",
                            "share": "2"
                          }
                        ]
                      },
                      "meta": {
                        "id": "70526954-3f37-11b2-b658-125557264b03",
                        "state": "VALIDATED",
                        "creationDate": "2025-08-12T18:22:02.098Z",
                        "transitionForLatestSave": "VALIDATE"
                      }
                    },
                    {
                      "type": "ENTITY",
                      "data": {
                        "category": "economics",
                        "year": "2024",
                        "laureates": [
                          {
                            "firstname": "Daron",
                            "surname": "Acemoglu",
                            "id": "1044",
                            "motivation": "\"for studies of how institutions are formed and affect prosperity\"",
                            "share": "3"
                          },
                          {
                            "firstname": "Simon",
                            "surname": "Johnson",
                            "id": "1045",
                            "motivation": "\"for studies of how institutions are formed and affect prosperity\"",
                            "share": "3"
                          },
                          {
                            "firstname": "James",
                            "surname": "Robinson",
                            "id": "1046",
                            "motivation": "\"for studies of how institutions are formed and affect prosperity\"",
                            "share": "3"
                          }
                        ]
                      },
                      "meta": {
                        "id": "70554c32-3f37-11b2-b658-125557264b03",
                        "state": "VALIDATED",
                        "creationDate": "2025-08-12T18:22:02.1Z",
                        "transitionForLatestSave": "VALIDATE"
                      }
                    }
                  ],
                  "page": {
                    "size": 2,
                    "totalElements": 2,
                    "totalPages": 1,
                    "number": 0
                  }
                }
              }
            }
          },
          "404": {
            "description": "Snapshot not found or expired",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Not Found",
                  "status": 404,
                  "detail": "cannot find snapshot by id=3d983910-77a9-11f0-8b9c-ae468cd3ed16",
                  "instance": "/api/search/snapshot/3d983910-77a9-11f0-8b9c-ae468cd3ed16",
                  "properties": {
                    "snapshotId": "3d983910-77a9-11f0-8b9c-ae468cd3ed16"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters (malformed point-in-time or invalid page parameters)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "examples": {
                  "Invalid DateTime Format": {
                    "description": "Invalid DateTime Format",
                    "value": {
                      "type": "about:blank",
                      "title": "Bad Request",
                      "status": 400,
                      "detail": "Invalid value '1234' for parameter 'pointInTime'",
                      "instance": "/api/search/snapshot/3d983910-77a9-11f0-8b9c-ae468cd3ed16",
                      "properties": {
                        "parameter": "pointInTime",
                        "invalidValue": "1234"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/search/snapshot/{snapshotId}/cancel": {
      "put": {
        "tags": [
          "Search"
        ],
        "summary": "Cancel a running snapshot creation",
        "description": "\nAttempts to cancel a running snapshot creation process. The operation:\n- Only succeeds if the snapshot is in RUNNING state\n- Returns the cancellation result and final status\n- Invalidates the snapshot entry if cancellation succeeds\n        ",
        "operationId": "cancelOfCreatingSnapshot",
        "parameters": [
          {
            "name": "snapshotId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cancellation request processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelSnapshotDto"
                },
                "examples": {
                  "Successful Cancellation": {
                    "description": "Successful Cancellation",
                    "value": {
                      "isCancelled": true,
                      "currentSnapshotStatus": "CANCELLED"
                    }
                  },
                  "Failed Cancellation": {
                    "description": "Failed Cancellation",
                    "value": {
                      "isCancelled": false,
                      "currentSnapshotStatus": "NOT_FOUND"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Snapshot not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Not Found",
                  "status": 404,
                  "detail": "cannot find snapshot by id=3d983910-77a9-11f0-8b9c-ae468cd3ed16",
                  "instance": "/api/search/snapshot/3d983910-77a9-11f0-8b9c-ae468cd3ed16/cancel",
                  "properties": {
                    "snapshotId": "3d983910-77a9-11f0-8b9c-ae468cd3ed16"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Snapshot is not in RUNNING state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Bad Request",
                  "status": 400,
                  "detail": "snapshot by id=3d983910-77a9-11f0-8b9c-ae468cd3ed16 is not running. current status=SUCCESSFUL",
                  "instance": "/api/search/snapshot/3d983910-77a9-11f0-8b9c-ae468cd3ed16/cancel",
                  "properties": {
                    "snapshotId": "3d983910-77a9-11f0-8b9c-ae468cd3ed16",
                    "currentStatus": "SUCCESSFUL"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/search/snapshot/{snapshotId}/status": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Get snapshot search status",
        "description": "\nRetrieves the current status of a snapshot search. The response includes:\n- Current status (one of: RUNNING, FAILED, CANCELLED, SUCCESSFUL, NOT_FOUND)\n- Number of entities collected\n- Calculation time\n- Creation timestamp\n- Finish timestamp (if completed)\n- Expiration date\n\nNote: The NOT_FOUND status occurs in rare race conditions where the snapshot exists when the endpoint is called but is deleted during data retrieval.\n        ",
        "operationId": "getStatusForSavingSnapshot",
        "parameters": [
          {
            "name": "snapshotId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved snapshot status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotStatusDto"
                },
                "examples": {
                  "Running Status": {
                    "description": "Running Status",
                    "value": {
                      "snapshotStatus": "RUNNING",
                      "expirationDate": "2025-08-13T11:22:02.025835-07:00",
                      "entitiesCount": 0,
                      "calculationTimeMillis": 300,
                      "createTime": "2025-08-12T11:22:01.725835-07:00"
                    }
                  },
                  "Successful Status": {
                    "description": "Successful Status",
                    "value": {
                      "snapshotStatus": "SUCCESSFUL",
                      "expirationDate": "2025-08-13T11:22:02.025835-07:00",
                      "entitiesCount": 2500,
                      "calculationTimeMillis": 2000,
                      "createTime": "2025-08-12T11:22:00.025835-07:00",
                      "finishTime": "2025-08-12T11:22:02.025835-07:00"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Snapshot not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Not Found",
                  "status": 404,
                  "detail": "cannot find snapshot by id=3d983910-77a9-11f0-8b9c-ae468cd3ed16",
                  "instance": "/api/search/snapshot/3d983910-77a9-11f0-8b9c-ae468cd3ed16/status",
                  "properties": {
                    "snapshotId": "3d983910-77a9-11f0-8b9c-ae468cd3ed16"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/search/{entityName}/{modelVersion}": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Perform synchronous entity search",
        "description": "\nExecutes a direct, in-memory search for entities without creating a persistent snapshot. This endpoint:\n- Returns results immediately as a streaming response\n- Is optimized for smaller result sets\n- Has configurable timeout and result limits\n- Supports point-in-time querying\n\nThe results are sorted in descending order by entity id.\n\nIf no request body is provided or an empty request body is sent, all entities of the specified model and version \nwill be returned (subject to the limit parameter).\n\nBest suited for:\n- Interactive searches requiring immediate results\n- Queries expected to return limited number of entities\n- UI components with real-time search functionality\n\nLimitations:\n- Maximum result limit: 10000 entities (this will silently limit the result to 10000)\n- Default result limit: 1000 entities\n- Default timeout: 60000 milliseconds\n        ",
        "operationId": "search",
        "parameters": [
          {
            "name": "entityName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modelVersion",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "clientPointTime",
            "in": "query",
            "description": "The point-in-time for searching the entities, in ISO 8601 format. Defaults to the consistency time of the system if not provided.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2035-01-01T12:00:00Z"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of rows to return. You can specify a limit of up to 10000 and defaults to 1000 if not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1000
            },
            "example": 25
          },
          {
            "name": "timeoutMillis",
            "in": "query",
            "description": "The maximum time to wait for the query to complete, in milliseconds, and defaults to60000 if not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 60000
            },
            "example": 1000
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbstractConditionDto"
              },
              "examples": {
                "Physics Nobel Prize Search": {
                  "summary": "Find VALIDATED physics Nobel prizes with neural networks research",
                  "description": "Physics Nobel Prize Search",
                  "value": {
                    "operator": "AND",
                    "conditions": [
                      {
                        "field": "state",
                        "operatorType": "EQUALS",
                        "value": "VALIDATED",
                        "type": "lifecycle"
                      },
                      {
                        "jsonPath": "$.category",
                        "operatorType": "EQUALS",
                        "value": "physics",
                        "type": "simple"
                      },
                      {
                        "jsonPath": "$.laureates[*].motivation",
                        "operatorType": "CONTAINS",
                        "value": "neural networks",
                        "type": "simple"
                      }
                    ],
                    "type": "group"
                  }
                },
                "Family Member Search": {
                  "summary": "Find married family members born after 1998",
                  "description": "Family Member Search",
                  "value": {
                    "operator": "AND",
                    "conditions": [
                      {
                        "jsonPath": "$.married",
                        "operatorType": "EQUALS",
                        "value": true,
                        "type": "simple"
                      },
                      {
                        "jsonPath": "$.birthdate",
                        "operatorType": "GREATER_OR_EQUAL",
                        "value": "1999-01-01",
                        "type": "simple"
                      }
                    ],
                    "type": "group"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Search executed successfully",
            "content": {
              "application/x-ndjson": {
                "example": [
                  {
                    "type": "ENTITY",
                    "data": {
                      "category": "physics",
                      "year": "2024",
                      "laureates": [
                        {
                          "firstname": "John",
                          "surname": "Hopfield",
                          "id": "1037",
                          "motivation": "\"for foundational discoveries and inventions that enable machine learning with artificial neural networks\"",
                          "share": "2"
                        },
                        {
                          "firstname": "Geoffrey",
                          "surname": "Hinton",
                          "id": "1038",
                          "motivation": "\"for foundational discoveries and inventions that enable machine learning with artificial neural networks\"",
                          "share": "2"
                        }
                      ]
                    },
                    "meta": {
                      "id": "70526954-3f37-11b2-b658-125557264b03",
                      "state": "VALIDATED",
                      "creationDate": "2025-08-12T18:22:02.098Z",
                      "transitionForLatestSave": "VALIDATE"
                    }
                  },
                  {
                    "type": "ENTITY",
                    "data": {
                      "category": "economics",
                      "year": "2024",
                      "laureates": [
                        {
                          "firstname": "Daron",
                          "surname": "Acemoglu",
                          "id": "1044",
                          "motivation": "\"for studies of how institutions are formed and affect prosperity\"",
                          "share": "3"
                        },
                        {
                          "firstname": "Simon",
                          "surname": "Johnson",
                          "id": "1045",
                          "motivation": "\"for studies of how institutions are formed and affect prosperity\"",
                          "share": "3"
                        },
                        {
                          "firstname": "James",
                          "surname": "Robinson",
                          "id": "1046",
                          "motivation": "\"for studies of how institutions are formed and affect prosperity\"",
                          "share": "3"
                        }
                      ]
                    },
                    "meta": {
                      "id": "70554c32-3f37-11b2-b658-125557264b03",
                      "state": "VALIDATED",
                      "creationDate": "2025-08-12T18:22:02.1Z",
                      "transitionForLatestSave": "VALIDATE"
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Invalid search parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Bad Request",
                  "status": 400,
                  "detail": "Limit 9999999 exceeds maximum allowed value of 10000",
                  "instance": "/api/search/nobel-prize/2"
                }
              }
            }
          },
          "404": {
            "description": "Entity model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Not Found",
                  "status": 404,
                  "detail": "cannot find model entityName=nobel-prize, version=2",
                  "instance": "/api/search/nobel-prize/2",
                  "properties": {
                    "entityName": "nobel-prize",
                    "entityVersion": 2
                  }
                }
              }
            }
          },
          "408": {
            "description": "Search timeout exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Request Timeout",
                  "status": 408,
                  "detail": "your report description failed with: Report timed out after 5m.Query timed out. Cause may be high load or too much data to process. For large data sets, it is recommended to use snapshot searches.",
                  "instance": "/api/search/nobel-prize/2"
                }
              }
            }
          }
        }
      }
    },
    "/sql/schema/": {
      "get": {
        "tags": [
          "SQL-Schema"
        ],
        "summary": "Get schema by name",
        "description": "Retrieves a schema configuration using its name",
        "operationId": "getSchemaByName",
        "parameters": [
          {
            "name": "schemaName",
            "in": "query",
            "description": "Name of the schema to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 1024,
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schema found",
            "content": {
              "application/json": {
                "example": {
                  "schemaName": "NOBEL_PRIZES",
                  "tables": [
                    {
                      "tableName": "nobel-prize",
                      "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                      "uniformedPath": "$",
                      "fields": [
                        {
                          "fieldName": "entity_id",
                          "fieldKey": "ENTITY_ID",
                          "fieldCategory": "SPECIAL",
                          "dataType": "UUID_TYPE"
                        },
                        {
                          "fieldName": "point_time",
                          "fieldKey": "POINT_TIME",
                          "fieldCategory": "SPECIAL",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "creation_date",
                          "fieldKey": "creationDate",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "last_update_date",
                          "fieldKey": "lastUpdateTime",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "state",
                          "fieldKey": "state",
                          "fieldCategory": "ROOT",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "category",
                          "fieldKey": ".category",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "year",
                          "fieldKey": ".year",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        }
                      ],
                      "hidden": false
                    },
                    {
                      "tableName": "nobel-prize_laureates",
                      "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                      "uniformedPath": "$.laureates[*]",
                      "fields": [
                        {
                          "fieldName": "entity_id",
                          "fieldKey": "ENTITY_ID",
                          "fieldCategory": "SPECIAL",
                          "dataType": "UUID_TYPE"
                        },
                        {
                          "fieldName": "point_time",
                          "fieldKey": "POINT_TIME",
                          "fieldCategory": "SPECIAL",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "creation_date",
                          "fieldKey": "creationDate",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "last_update_date",
                          "fieldKey": "lastUpdateTime",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "state",
                          "fieldKey": "state",
                          "fieldCategory": "ROOT",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "index",
                          "fieldKey": "",
                          "fieldCategory": "INDEX",
                          "dataType": "INTEGER",
                          "isArray": true,
                          "flatten": true,
                          "arrayFields": [
                            {
                              "fieldName": "index_0",
                              "fieldKey": "0",
                              "fieldCategory": "INDEX",
                              "dataType": "INTEGER"
                            }
                          ]
                        },
                        {
                          "fieldName": "firstname",
                          "fieldKey": ".firstname",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "surname",
                          "fieldKey": ".surname",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "id",
                          "fieldKey": ".id",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "motivation",
                          "fieldKey": ".motivation",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "share",
                          "fieldKey": ".share",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        }
                      ],
                      "hidden": false
                    },
                    {
                      "tableName": "nobel-prize_json",
                      "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                      "uniformedPath": "json",
                      "fields": [
                        {
                          "fieldName": "entity_id",
                          "fieldKey": "ENTITY_ID",
                          "fieldCategory": "SPECIAL",
                          "dataType": "UUID_TYPE"
                        },
                        {
                          "fieldName": "point_time",
                          "fieldKey": "POINT_TIME",
                          "fieldCategory": "SPECIAL",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "creation_date",
                          "fieldKey": "creationDate",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "last_update_date",
                          "fieldKey": "lastUpdateTime",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "state",
                          "fieldKey": "state",
                          "fieldCategory": "ROOT",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "entity",
                          "fieldKey": "JSON",
                          "fieldCategory": "SPECIAL",
                          "dataType": "STRING"
                        }
                      ],
                      "hidden": false
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Schema not found",
            "content": {
              "application/json": {
                "example": {
                  "type": "about:blank",
                  "title": "Not Found",
                  "status": 404,
                  "detail": "Schema larry not found",
                  "instance": "/api/sql/schema/",
                  "properties": {
                    "schemaName": "larry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "SQL-Schema"
        ],
        "summary": "Save schema",
        "description": "Saves a new or updates an existing schema configuration",
        "operationId": "saveSchema",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaConfigDto"
              },
              "examples": {
                "Nobel Prize Schema Configuration": {
                  "description": "Nobel Prize Schema Configuration",
                  "value": {
                    "schemaName": "NOBEL_PRIZES",
                    "tables": [
                      {
                        "tableName": "nobel-prize",
                        "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                        "uniformedPath": "$",
                        "fields": [
                          {
                            "fieldName": "entity_id",
                            "fieldKey": "ENTITY_ID",
                            "fieldCategory": "SPECIAL",
                            "dataType": "UUID_TYPE"
                          },
                          {
                            "fieldName": "point_time",
                            "fieldKey": "POINT_TIME",
                            "fieldCategory": "SPECIAL",
                            "dataType": "DATE"
                          },
                          {
                            "fieldName": "creation_date",
                            "fieldKey": "creationDate",
                            "fieldCategory": "ROOT",
                            "dataType": "DATE"
                          },
                          {
                            "fieldName": "last_update_date",
                            "fieldKey": "lastUpdateTime",
                            "fieldCategory": "ROOT",
                            "dataType": "DATE"
                          },
                          {
                            "fieldName": "state",
                            "fieldKey": "state",
                            "fieldCategory": "ROOT",
                            "dataType": "STRING"
                          },
                          {
                            "fieldName": "category",
                            "fieldKey": ".category",
                            "fieldCategory": "DATA",
                            "dataType": "STRING"
                          },
                          {
                            "fieldName": "year",
                            "fieldKey": ".year",
                            "fieldCategory": "DATA",
                            "dataType": "STRING"
                          }
                        ],
                        "hidden": false
                      },
                      {
                        "tableName": "nobel-prize_laureates",
                        "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                        "uniformedPath": "$.laureates[*]",
                        "fields": [
                          {
                            "fieldName": "entity_id",
                            "fieldKey": "ENTITY_ID",
                            "fieldCategory": "SPECIAL",
                            "dataType": "UUID_TYPE"
                          },
                          {
                            "fieldName": "point_time",
                            "fieldKey": "POINT_TIME",
                            "fieldCategory": "SPECIAL",
                            "dataType": "DATE"
                          },
                          {
                            "fieldName": "creation_date",
                            "fieldKey": "creationDate",
                            "fieldCategory": "ROOT",
                            "dataType": "DATE"
                          },
                          {
                            "fieldName": "last_update_date",
                            "fieldKey": "lastUpdateTime",
                            "fieldCategory": "ROOT",
                            "dataType": "DATE"
                          },
                          {
                            "fieldName": "state",
                            "fieldKey": "state",
                            "fieldCategory": "ROOT",
                            "dataType": "STRING"
                          },
                          {
                            "fieldName": "index",
                            "fieldKey": "",
                            "fieldCategory": "INDEX",
                            "dataType": "INTEGER",
                            "isArray": true,
                            "flatten": true,
                            "arrayFields": [
                              {
                                "fieldName": "index_0",
                                "fieldKey": "0",
                                "fieldCategory": "INDEX",
                                "dataType": "INTEGER"
                              }
                            ]
                          },
                          {
                            "fieldName": "firstname",
                            "fieldKey": ".firstname",
                            "fieldCategory": "DATA",
                            "dataType": "STRING"
                          },
                          {
                            "fieldName": "surname",
                            "fieldKey": ".surname",
                            "fieldCategory": "DATA",
                            "dataType": "STRING"
                          },
                          {
                            "fieldName": "id",
                            "fieldKey": ".id",
                            "fieldCategory": "DATA",
                            "dataType": "STRING"
                          },
                          {
                            "fieldName": "motivation",
                            "fieldKey": ".motivation",
                            "fieldCategory": "DATA",
                            "dataType": "STRING"
                          },
                          {
                            "fieldName": "share",
                            "fieldKey": ".share",
                            "fieldCategory": "DATA",
                            "dataType": "STRING"
                          }
                        ],
                        "hidden": false
                      },
                      {
                        "tableName": "nobel-prize_json",
                        "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                        "uniformedPath": "json",
                        "fields": [
                          {
                            "fieldName": "entity_id",
                            "fieldKey": "ENTITY_ID",
                            "fieldCategory": "SPECIAL",
                            "dataType": "UUID_TYPE"
                          },
                          {
                            "fieldName": "point_time",
                            "fieldKey": "POINT_TIME",
                            "fieldCategory": "SPECIAL",
                            "dataType": "DATE"
                          },
                          {
                            "fieldName": "creation_date",
                            "fieldKey": "creationDate",
                            "fieldCategory": "ROOT",
                            "dataType": "DATE"
                          },
                          {
                            "fieldName": "last_update_date",
                            "fieldKey": "lastUpdateTime",
                            "fieldCategory": "ROOT",
                            "dataType": "DATE"
                          },
                          {
                            "fieldName": "state",
                            "fieldKey": "state",
                            "fieldCategory": "ROOT",
                            "dataType": "STRING"
                          },
                          {
                            "fieldName": "entity",
                            "fieldKey": "JSON",
                            "fieldCategory": "SPECIAL",
                            "dataType": "STRING"
                          }
                        ],
                        "hidden": false
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Schema saved successfully",
            "content": {
              "application/json": {
                "example": "1d1e1b10-1155-11f0-bcd5-ae468cd3ed16"
              }
            }
          },
          "400": {
            "description": "Invalid schema configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Bad Request",
                  "status": 400,
                  "detail": "String length of the schema name is outside of the bounds [1,1024]",
                  "instance": "/api/sql/schema/"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SQL-Schema"
        ],
        "summary": "Delete schema by name",
        "description": "Deletes an existing schema configuration using its name",
        "operationId": "deleteSchemaByName",
        "parameters": [
          {
            "name": "schemaName",
            "in": "query",
            "description": "Name of the schema to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schema deleted successfully",
            "content": {
              "application/json": {
                "example": "SQL Schema with name NOBEL_PRIZES deleted"
              }
            }
          },
          "404": {
            "description": "Schema not found",
            "content": {
              "application/json": {
                "example": {
                  "type": "about:blank",
                  "title": "Not Found",
                  "status": 404,
                  "detail": "Schema larry not found",
                  "instance": "/api/sql/schema/",
                  "properties": {
                    "schemaName": "larry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sql/schema/genTables/{entityModelId}": {
      "get": {
        "tags": [
          "SQL-Schema"
        ],
        "summary": "Generate SQL tables from an entity model",
        "description": "Generates table configurations based on entity model ID",
        "operationId": "genTables",
        "parameters": [
          {
            "name": "entityModelId",
            "in": "path",
            "description": "The entity model id to generate tables from",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tables generated successfully",
            "content": {
              "application/json": {
                "example": [
                  {
                    "tableName": "nobel-prize",
                    "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                    "uniformedPath": "$",
                    "fields": [
                      {
                        "fieldName": "entity_id",
                        "fieldKey": "ENTITY_ID",
                        "fieldCategory": "SPECIAL",
                        "dataType": "UUID_TYPE"
                      },
                      {
                        "fieldName": "point_time",
                        "fieldKey": "POINT_TIME",
                        "fieldCategory": "SPECIAL",
                        "dataType": "DATE"
                      },
                      {
                        "fieldName": "creation_date",
                        "fieldKey": "creationDate",
                        "fieldCategory": "ROOT",
                        "dataType": "DATE"
                      },
                      {
                        "fieldName": "last_update_date",
                        "fieldKey": "lastUpdateTime",
                        "fieldCategory": "ROOT",
                        "dataType": "DATE"
                      },
                      {
                        "fieldName": "state",
                        "fieldKey": "state",
                        "fieldCategory": "ROOT",
                        "dataType": "STRING"
                      },
                      {
                        "fieldName": "category",
                        "fieldKey": ".category",
                        "fieldCategory": "DATA",
                        "dataType": "STRING"
                      },
                      {
                        "fieldName": "year",
                        "fieldKey": ".year",
                        "fieldCategory": "DATA",
                        "dataType": "STRING"
                      }
                    ],
                    "hidden": false
                  },
                  {
                    "tableName": "nobel-prize_laureates",
                    "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                    "uniformedPath": "$.laureates[*]",
                    "fields": [
                      {
                        "fieldName": "entity_id",
                        "fieldKey": "ENTITY_ID",
                        "fieldCategory": "SPECIAL",
                        "dataType": "UUID_TYPE"
                      },
                      {
                        "fieldName": "point_time",
                        "fieldKey": "POINT_TIME",
                        "fieldCategory": "SPECIAL",
                        "dataType": "DATE"
                      },
                      {
                        "fieldName": "creation_date",
                        "fieldKey": "creationDate",
                        "fieldCategory": "ROOT",
                        "dataType": "DATE"
                      },
                      {
                        "fieldName": "last_update_date",
                        "fieldKey": "lastUpdateTime",
                        "fieldCategory": "ROOT",
                        "dataType": "DATE"
                      },
                      {
                        "fieldName": "state",
                        "fieldKey": "state",
                        "fieldCategory": "ROOT",
                        "dataType": "STRING"
                      },
                      {
                        "fieldName": "index",
                        "fieldKey": "",
                        "fieldCategory": "INDEX",
                        "dataType": "INTEGER",
                        "isArray": true,
                        "flatten": true,
                        "arrayFields": [
                          {
                            "fieldName": "index_0",
                            "fieldKey": "0",
                            "fieldCategory": "INDEX",
                            "dataType": "INTEGER"
                          }
                        ]
                      },
                      {
                        "fieldName": "firstname",
                        "fieldKey": ".firstname",
                        "fieldCategory": "DATA",
                        "dataType": "STRING"
                      },
                      {
                        "fieldName": "surname",
                        "fieldKey": ".surname",
                        "fieldCategory": "DATA",
                        "dataType": "STRING"
                      },
                      {
                        "fieldName": "id",
                        "fieldKey": ".id",
                        "fieldCategory": "DATA",
                        "dataType": "STRING"
                      },
                      {
                        "fieldName": "motivation",
                        "fieldKey": ".motivation",
                        "fieldCategory": "DATA",
                        "dataType": "STRING"
                      },
                      {
                        "fieldName": "share",
                        "fieldKey": ".share",
                        "fieldCategory": "DATA",
                        "dataType": "STRING"
                      }
                    ],
                    "hidden": false
                  },
                  {
                    "tableName": "nobel-prize_json",
                    "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                    "uniformedPath": "json",
                    "fields": [
                      {
                        "fieldName": "entity_id",
                        "fieldKey": "ENTITY_ID",
                        "fieldCategory": "SPECIAL",
                        "dataType": "UUID_TYPE"
                      },
                      {
                        "fieldName": "point_time",
                        "fieldKey": "POINT_TIME",
                        "fieldCategory": "SPECIAL",
                        "dataType": "DATE"
                      },
                      {
                        "fieldName": "creation_date",
                        "fieldKey": "creationDate",
                        "fieldCategory": "ROOT",
                        "dataType": "DATE"
                      },
                      {
                        "fieldName": "last_update_date",
                        "fieldKey": "lastUpdateTime",
                        "fieldCategory": "ROOT",
                        "dataType": "DATE"
                      },
                      {
                        "fieldName": "state",
                        "fieldKey": "state",
                        "fieldCategory": "ROOT",
                        "dataType": "STRING"
                      },
                      {
                        "fieldName": "entity",
                        "fieldKey": "JSON",
                        "fieldCategory": "SPECIAL",
                        "dataType": "STRING"
                      }
                    ],
                    "hidden": false
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/sql/schema/listAll": {
      "get": {
        "tags": [
          "SQL-Schema"
        ],
        "summary": "List all schemas",
        "description": "Retrieves all available schema configurations",
        "operationId": "getSchemas",
        "responses": {
          "200": {
            "description": "List of schemas retrieved successfully",
            "content": {
              "application/json": {
                "example": [
                  {
                    "schemaName": "NOBEL_PRIZES",
                    "tables": [
                      {
                        "tableName": "nobel-prize",
                        "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                        "uniformedPath": "$",
                        "fields": [
                          {
                            "fieldName": "entity_id",
                            "fieldKey": "ENTITY_ID",
                            "fieldCategory": "SPECIAL",
                            "dataType": "UUID_TYPE"
                          },
                          {
                            "fieldName": "point_time",
                            "fieldKey": "POINT_TIME",
                            "fieldCategory": "SPECIAL",
                            "dataType": "DATE"
                          },
                          {
                            "fieldName": "creation_date",
                            "fieldKey": "creationDate",
                            "fieldCategory": "ROOT",
                            "dataType": "DATE"
                          },
                          {
                            "fieldName": "last_update_date",
                            "fieldKey": "lastUpdateTime",
                            "fieldCategory": "ROOT",
                            "dataType": "DATE"
                          },
                          {
                            "fieldName": "state",
                            "fieldKey": "state",
                            "fieldCategory": "ROOT",
                            "dataType": "STRING"
                          },
                          {
                            "fieldName": "category",
                            "fieldKey": ".category",
                            "fieldCategory": "DATA",
                            "dataType": "STRING"
                          },
                          {
                            "fieldName": "year",
                            "fieldKey": ".year",
                            "fieldCategory": "DATA",
                            "dataType": "STRING"
                          }
                        ],
                        "hidden": false
                      },
                      {
                        "tableName": "nobel-prize_laureates",
                        "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                        "uniformedPath": "$.laureates[*]",
                        "fields": [
                          {
                            "fieldName": "entity_id",
                            "fieldKey": "ENTITY_ID",
                            "fieldCategory": "SPECIAL",
                            "dataType": "UUID_TYPE"
                          },
                          {
                            "fieldName": "point_time",
                            "fieldKey": "POINT_TIME",
                            "fieldCategory": "SPECIAL",
                            "dataType": "DATE"
                          },
                          {
                            "fieldName": "creation_date",
                            "fieldKey": "creationDate",
                            "fieldCategory": "ROOT",
                            "dataType": "DATE"
                          },
                          {
                            "fieldName": "last_update_date",
                            "fieldKey": "lastUpdateTime",
                            "fieldCategory": "ROOT",
                            "dataType": "DATE"
                          },
                          {
                            "fieldName": "state",
                            "fieldKey": "state",
                            "fieldCategory": "ROOT",
                            "dataType": "STRING"
                          },
                          {
                            "fieldName": "index",
                            "fieldKey": "",
                            "fieldCategory": "INDEX",
                            "dataType": "INTEGER",
                            "isArray": true,
                            "flatten": true,
                            "arrayFields": [
                              {
                                "fieldName": "index_0",
                                "fieldKey": "0",
                                "fieldCategory": "INDEX",
                                "dataType": "INTEGER"
                              }
                            ]
                          },
                          {
                            "fieldName": "firstname",
                            "fieldKey": ".firstname",
                            "fieldCategory": "DATA",
                            "dataType": "STRING"
                          },
                          {
                            "fieldName": "surname",
                            "fieldKey": ".surname",
                            "fieldCategory": "DATA",
                            "dataType": "STRING"
                          },
                          {
                            "fieldName": "id",
                            "fieldKey": ".id",
                            "fieldCategory": "DATA",
                            "dataType": "STRING"
                          },
                          {
                            "fieldName": "motivation",
                            "fieldKey": ".motivation",
                            "fieldCategory": "DATA",
                            "dataType": "STRING"
                          },
                          {
                            "fieldName": "share",
                            "fieldKey": ".share",
                            "fieldCategory": "DATA",
                            "dataType": "STRING"
                          }
                        ],
                        "hidden": false
                      },
                      {
                        "tableName": "nobel-prize_json",
                        "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                        "uniformedPath": "json",
                        "fields": [
                          {
                            "fieldName": "entity_id",
                            "fieldKey": "ENTITY_ID",
                            "fieldCategory": "SPECIAL",
                            "dataType": "UUID_TYPE"
                          },
                          {
                            "fieldName": "point_time",
                            "fieldKey": "POINT_TIME",
                            "fieldCategory": "SPECIAL",
                            "dataType": "DATE"
                          },
                          {
                            "fieldName": "creation_date",
                            "fieldKey": "creationDate",
                            "fieldCategory": "ROOT",
                            "dataType": "DATE"
                          },
                          {
                            "fieldName": "last_update_date",
                            "fieldKey": "lastUpdateTime",
                            "fieldCategory": "ROOT",
                            "dataType": "DATE"
                          },
                          {
                            "fieldName": "state",
                            "fieldKey": "state",
                            "fieldCategory": "ROOT",
                            "dataType": "STRING"
                          },
                          {
                            "fieldName": "entity",
                            "fieldKey": "JSON",
                            "fieldCategory": "SPECIAL",
                            "dataType": "STRING"
                          }
                        ],
                        "hidden": false
                      }
                    ]
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/sql/schema/putDefault/{schemaName}": {
      "put": {
        "tags": [
          "SQL-Schema"
        ],
        "summary": "Create default schema",
        "description": "Creates a new schema configuration that includes all available entity models with their complete field structures",
        "operationId": "putSchema",
        "parameters": [
          {
            "name": "schemaName",
            "in": "path",
            "description": "Name for the new schema. The name can have a maximum of 1024 characters",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 1024,
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schema created successfully",
            "content": {
              "application/json": {
                "example": {
                  "schemaName": "NOBEL_PRIZES",
                  "tables": [
                    {
                      "tableName": "nobel-prize",
                      "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                      "uniformedPath": "$",
                      "fields": [
                        {
                          "fieldName": "entity_id",
                          "fieldKey": "ENTITY_ID",
                          "fieldCategory": "SPECIAL",
                          "dataType": "UUID_TYPE"
                        },
                        {
                          "fieldName": "point_time",
                          "fieldKey": "POINT_TIME",
                          "fieldCategory": "SPECIAL",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "creation_date",
                          "fieldKey": "creationDate",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "last_update_date",
                          "fieldKey": "lastUpdateTime",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "state",
                          "fieldKey": "state",
                          "fieldCategory": "ROOT",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "category",
                          "fieldKey": ".category",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "year",
                          "fieldKey": ".year",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        }
                      ],
                      "hidden": false
                    },
                    {
                      "tableName": "nobel-prize_laureates",
                      "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                      "uniformedPath": "$.laureates[*]",
                      "fields": [
                        {
                          "fieldName": "entity_id",
                          "fieldKey": "ENTITY_ID",
                          "fieldCategory": "SPECIAL",
                          "dataType": "UUID_TYPE"
                        },
                        {
                          "fieldName": "point_time",
                          "fieldKey": "POINT_TIME",
                          "fieldCategory": "SPECIAL",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "creation_date",
                          "fieldKey": "creationDate",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "last_update_date",
                          "fieldKey": "lastUpdateTime",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "state",
                          "fieldKey": "state",
                          "fieldCategory": "ROOT",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "index",
                          "fieldKey": "",
                          "fieldCategory": "INDEX",
                          "dataType": "INTEGER",
                          "isArray": true,
                          "flatten": true,
                          "arrayFields": [
                            {
                              "fieldName": "index_0",
                              "fieldKey": "0",
                              "fieldCategory": "INDEX",
                              "dataType": "INTEGER"
                            }
                          ]
                        },
                        {
                          "fieldName": "firstname",
                          "fieldKey": ".firstname",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "surname",
                          "fieldKey": ".surname",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "id",
                          "fieldKey": ".id",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "motivation",
                          "fieldKey": ".motivation",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "share",
                          "fieldKey": ".share",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        }
                      ],
                      "hidden": false
                    },
                    {
                      "tableName": "nobel-prize_json",
                      "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                      "uniformedPath": "json",
                      "fields": [
                        {
                          "fieldName": "entity_id",
                          "fieldKey": "ENTITY_ID",
                          "fieldCategory": "SPECIAL",
                          "dataType": "UUID_TYPE"
                        },
                        {
                          "fieldName": "point_time",
                          "fieldKey": "POINT_TIME",
                          "fieldCategory": "SPECIAL",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "creation_date",
                          "fieldKey": "creationDate",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "last_update_date",
                          "fieldKey": "lastUpdateTime",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "state",
                          "fieldKey": "state",
                          "fieldCategory": "ROOT",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "entity",
                          "fieldKey": "JSON",
                          "fieldCategory": "SPECIAL",
                          "dataType": "STRING"
                        }
                      ],
                      "hidden": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid schema name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetail"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Bad Request",
                  "status": 400,
                  "detail": "String length of the schema name is outside of the bounds [1,1024]",
                  "instance": "/api/sql/schema/putDefault/A-string-that-exceeds-the-maximum-permitted-length-of-1024"
                }
              }
            }
          }
        }
      }
    },
    "/sql/schema/updateTables/{entityModelId}": {
      "post": {
        "tags": [
          "SQL-Schema"
        ],
        "summary": "Synchronize given SQL table configurations with the current entity model",
        "description": "Synchronizes given table configurations with the current entity model structure, preserving custom settings while incorporating any model changes",
        "operationId": "updateTables",
        "parameters": [
          {
            "name": "entityModelId",
            "in": "path",
            "description": "The entity model ID to update tables from",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              },
              "examples": {
                "Example Tables from the Nobel Prize model": {
                  "description": "Example Tables from the Nobel Prize model",
                  "value": [
                    {
                      "tableName": "nobel-prize",
                      "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                      "uniformedPath": "$",
                      "fields": [
                        {
                          "fieldName": "entity_id",
                          "fieldKey": "ENTITY_ID",
                          "fieldCategory": "SPECIAL",
                          "dataType": "UUID_TYPE"
                        },
                        {
                          "fieldName": "point_time",
                          "fieldKey": "POINT_TIME",
                          "fieldCategory": "SPECIAL",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "creation_date",
                          "fieldKey": "creationDate",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "last_update_date",
                          "fieldKey": "lastUpdateTime",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "state",
                          "fieldKey": "state",
                          "fieldCategory": "ROOT",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "category",
                          "fieldKey": ".category",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "year",
                          "fieldKey": ".year",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        }
                      ],
                      "hidden": false
                    },
                    {
                      "tableName": "nobel-prize_laureates",
                      "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                      "uniformedPath": "$.laureates[*]",
                      "fields": [
                        {
                          "fieldName": "entity_id",
                          "fieldKey": "ENTITY_ID",
                          "fieldCategory": "SPECIAL",
                          "dataType": "UUID_TYPE"
                        },
                        {
                          "fieldName": "point_time",
                          "fieldKey": "POINT_TIME",
                          "fieldCategory": "SPECIAL",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "creation_date",
                          "fieldKey": "creationDate",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "last_update_date",
                          "fieldKey": "lastUpdateTime",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "state",
                          "fieldKey": "state",
                          "fieldCategory": "ROOT",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "index",
                          "fieldKey": "",
                          "fieldCategory": "INDEX",
                          "dataType": "INTEGER",
                          "isArray": true,
                          "flatten": true,
                          "arrayFields": [
                            {
                              "fieldName": "index_0",
                              "fieldKey": "0",
                              "fieldCategory": "INDEX",
                              "dataType": "INTEGER"
                            }
                          ]
                        },
                        {
                          "fieldName": "firstname",
                          "fieldKey": ".firstname",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "surname",
                          "fieldKey": ".surname",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "id",
                          "fieldKey": ".id",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "motivation",
                          "fieldKey": ".motivation",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "share",
                          "fieldKey": ".share",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        }
                      ],
                      "hidden": false
                    },
                    {
                      "tableName": "nobel-prize_json",
                      "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                      "uniformedPath": "json",
                      "fields": [
                        {
                          "fieldName": "entity_id",
                          "fieldKey": "ENTITY_ID",
                          "fieldCategory": "SPECIAL",
                          "dataType": "UUID_TYPE"
                        },
                        {
                          "fieldName": "point_time",
                          "fieldKey": "POINT_TIME",
                          "fieldCategory": "SPECIAL",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "creation_date",
                          "fieldKey": "creationDate",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "last_update_date",
                          "fieldKey": "lastUpdateTime",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "state",
                          "fieldKey": "state",
                          "fieldCategory": "ROOT",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "entity",
                          "fieldKey": "JSON",
                          "fieldCategory": "SPECIAL",
                          "dataType": "STRING"
                        }
                      ],
                      "hidden": false
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Tables updated successfully",
            "content": {
              "application/json": {
                "example": [
                  {
                    "tableName": "nobel-prize",
                    "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                    "uniformedPath": "$",
                    "fields": [
                      {
                        "fieldName": "entity_id",
                        "fieldKey": "ENTITY_ID",
                        "fieldCategory": "SPECIAL",
                        "dataType": "UUID_TYPE"
                      },
                      {
                        "fieldName": "point_time",
                        "fieldKey": "POINT_TIME",
                        "fieldCategory": "SPECIAL",
                        "dataType": "DATE"
                      },
                      {
                        "fieldName": "creation_date",
                        "fieldKey": "creationDate",
                        "fieldCategory": "ROOT",
                        "dataType": "DATE"
                      },
                      {
                        "fieldName": "last_update_date",
                        "fieldKey": "lastUpdateTime",
                        "fieldCategory": "ROOT",
                        "dataType": "DATE"
                      },
                      {
                        "fieldName": "state",
                        "fieldKey": "state",
                        "fieldCategory": "ROOT",
                        "dataType": "STRING"
                      },
                      {
                        "fieldName": "category",
                        "fieldKey": ".category",
                        "fieldCategory": "DATA",
                        "dataType": "STRING"
                      },
                      {
                        "fieldName": "year",
                        "fieldKey": ".year",
                        "fieldCategory": "DATA",
                        "dataType": "STRING"
                      }
                    ],
                    "hidden": false
                  },
                  {
                    "tableName": "nobel-prize_laureates",
                    "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                    "uniformedPath": "$.laureates[*]",
                    "fields": [
                      {
                        "fieldName": "entity_id",
                        "fieldKey": "ENTITY_ID",
                        "fieldCategory": "SPECIAL",
                        "dataType": "UUID_TYPE"
                      },
                      {
                        "fieldName": "point_time",
                        "fieldKey": "POINT_TIME",
                        "fieldCategory": "SPECIAL",
                        "dataType": "DATE"
                      },
                      {
                        "fieldName": "creation_date",
                        "fieldKey": "creationDate",
                        "fieldCategory": "ROOT",
                        "dataType": "DATE"
                      },
                      {
                        "fieldName": "last_update_date",
                        "fieldKey": "lastUpdateTime",
                        "fieldCategory": "ROOT",
                        "dataType": "DATE"
                      },
                      {
                        "fieldName": "state",
                        "fieldKey": "state",
                        "fieldCategory": "ROOT",
                        "dataType": "STRING"
                      },
                      {
                        "fieldName": "index",
                        "fieldKey": "",
                        "fieldCategory": "INDEX",
                        "dataType": "INTEGER",
                        "isArray": true,
                        "flatten": true,
                        "arrayFields": [
                          {
                            "fieldName": "index_0",
                            "fieldKey": "0",
                            "fieldCategory": "INDEX",
                            "dataType": "INTEGER"
                          }
                        ]
                      },
                      {
                        "fieldName": "firstname",
                        "fieldKey": ".firstname",
                        "fieldCategory": "DATA",
                        "dataType": "STRING"
                      },
                      {
                        "fieldName": "surname",
                        "fieldKey": ".surname",
                        "fieldCategory": "DATA",
                        "dataType": "STRING"
                      },
                      {
                        "fieldName": "id",
                        "fieldKey": ".id",
                        "fieldCategory": "DATA",
                        "dataType": "STRING"
                      },
                      {
                        "fieldName": "motivation",
                        "fieldKey": ".motivation",
                        "fieldCategory": "DATA",
                        "dataType": "STRING"
                      },
                      {
                        "fieldName": "share",
                        "fieldKey": ".share",
                        "fieldCategory": "DATA",
                        "dataType": "STRING"
                      }
                    ],
                    "hidden": false
                  },
                  {
                    "tableName": "nobel-prize_json",
                    "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                    "uniformedPath": "json",
                    "fields": [
                      {
                        "fieldName": "entity_id",
                        "fieldKey": "ENTITY_ID",
                        "fieldCategory": "SPECIAL",
                        "dataType": "UUID_TYPE"
                      },
                      {
                        "fieldName": "point_time",
                        "fieldKey": "POINT_TIME",
                        "fieldCategory": "SPECIAL",
                        "dataType": "DATE"
                      },
                      {
                        "fieldName": "creation_date",
                        "fieldKey": "creationDate",
                        "fieldCategory": "ROOT",
                        "dataType": "DATE"
                      },
                      {
                        "fieldName": "last_update_date",
                        "fieldKey": "lastUpdateTime",
                        "fieldCategory": "ROOT",
                        "dataType": "DATE"
                      },
                      {
                        "fieldName": "state",
                        "fieldKey": "state",
                        "fieldCategory": "ROOT",
                        "dataType": "STRING"
                      },
                      {
                        "fieldName": "entity",
                        "fieldKey": "JSON",
                        "fieldCategory": "SPECIAL",
                        "dataType": "STRING"
                      }
                    ],
                    "hidden": false
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/sql/schema/{schemaId}": {
      "get": {
        "tags": [
          "SQL-Schema"
        ],
        "summary": "Get schema by ID",
        "description": "Retrieves a schema configuration using its UUID",
        "operationId": "getSchema",
        "parameters": [
          {
            "name": "schemaId",
            "in": "path",
            "description": "UUID of the schema to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schema found",
            "content": {
              "application/json": {
                "example": {
                  "schemaName": "NOBEL_PRIZES",
                  "tables": [
                    {
                      "tableName": "nobel-prize",
                      "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                      "uniformedPath": "$",
                      "fields": [
                        {
                          "fieldName": "entity_id",
                          "fieldKey": "ENTITY_ID",
                          "fieldCategory": "SPECIAL",
                          "dataType": "UUID_TYPE"
                        },
                        {
                          "fieldName": "point_time",
                          "fieldKey": "POINT_TIME",
                          "fieldCategory": "SPECIAL",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "creation_date",
                          "fieldKey": "creationDate",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "last_update_date",
                          "fieldKey": "lastUpdateTime",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "state",
                          "fieldKey": "state",
                          "fieldCategory": "ROOT",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "category",
                          "fieldKey": ".category",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "year",
                          "fieldKey": ".year",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        }
                      ],
                      "hidden": false
                    },
                    {
                      "tableName": "nobel-prize_laureates",
                      "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                      "uniformedPath": "$.laureates[*]",
                      "fields": [
                        {
                          "fieldName": "entity_id",
                          "fieldKey": "ENTITY_ID",
                          "fieldCategory": "SPECIAL",
                          "dataType": "UUID_TYPE"
                        },
                        {
                          "fieldName": "point_time",
                          "fieldKey": "POINT_TIME",
                          "fieldCategory": "SPECIAL",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "creation_date",
                          "fieldKey": "creationDate",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "last_update_date",
                          "fieldKey": "lastUpdateTime",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "state",
                          "fieldKey": "state",
                          "fieldCategory": "ROOT",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "index",
                          "fieldKey": "",
                          "fieldCategory": "INDEX",
                          "dataType": "INTEGER",
                          "isArray": true,
                          "flatten": true,
                          "arrayFields": [
                            {
                              "fieldName": "index_0",
                              "fieldKey": "0",
                              "fieldCategory": "INDEX",
                              "dataType": "INTEGER"
                            }
                          ]
                        },
                        {
                          "fieldName": "firstname",
                          "fieldKey": ".firstname",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "surname",
                          "fieldKey": ".surname",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "id",
                          "fieldKey": ".id",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "motivation",
                          "fieldKey": ".motivation",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "share",
                          "fieldKey": ".share",
                          "fieldCategory": "DATA",
                          "dataType": "STRING"
                        }
                      ],
                      "hidden": false
                    },
                    {
                      "tableName": "nobel-prize_json",
                      "metadataClassId": "e43e510a-779f-11f0-885b-ae468cd3ed16",
                      "uniformedPath": "json",
                      "fields": [
                        {
                          "fieldName": "entity_id",
                          "fieldKey": "ENTITY_ID",
                          "fieldCategory": "SPECIAL",
                          "dataType": "UUID_TYPE"
                        },
                        {
                          "fieldName": "point_time",
                          "fieldKey": "POINT_TIME",
                          "fieldCategory": "SPECIAL",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "creation_date",
                          "fieldKey": "creationDate",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "last_update_date",
                          "fieldKey": "lastUpdateTime",
                          "fieldCategory": "ROOT",
                          "dataType": "DATE"
                        },
                        {
                          "fieldName": "state",
                          "fieldKey": "state",
                          "fieldCategory": "ROOT",
                          "dataType": "STRING"
                        },
                        {
                          "fieldName": "entity",
                          "fieldKey": "JSON",
                          "fieldCategory": "SPECIAL",
                          "dataType": "STRING"
                        }
                      ],
                      "hidden": false
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Schema not found",
            "content": {
              "application/json": {
                "example": {
                  "type": "about:blank",
                  "title": "Not Found",
                  "status": 404,
                  "detail": "Schema with id e46a1bf0-779f-11f0-885b-ae468cd3ed16 not found",
                  "instance": "/api/sql/schema/e46a1bf0-779f-11f0-885b-ae468cd3ed16",
                  "properties": {
                    "schemaId": "e46a1bf0-779f-11f0-885b-ae468cd3ed16"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SQL-Schema"
        ],
        "summary": "Delete schema by ID",
        "description": "Deletes a schema configuration using its UUID",
        "operationId": "deleteSchema",
        "parameters": [
          {
            "name": "schemaId",
            "in": "path",
            "description": "UUID of the schema to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schema deleted successfully",
            "content": {
              "application/json": {
                "example": "SQL Schema with id 1d1e1b10-1155-11f0-bcd5-ae468cd3ed16 deleted"
              }
            }
          },
          "404": {
            "description": "Schema not found",
            "content": {
              "application/json": {
                "example": {
                  "type": "about:blank",
                  "title": "Not Found",
                  "status": 404,
                  "detail": "Schema with id e46a1bf0-779f-11f0-885b-ae468cd3ed16 not found",
                  "instance": "/api/sql/schema/e46a1bf0-779f-11f0-885b-ae468cd3ed16",
                  "properties": {
                    "schemaId": "e46a1bf0-779f-11f0-885b-ae468cd3ed16"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ProblemDetail": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "format": "uri"
          },
          "title": {
            "type": "string"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "detail": {
            "type": "string"
          },
          "instance": {
            "type": "string",
            "format": "uri"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "CancelSnapshotDto": {
        "type": "object",
        "properties": {
          "isCancelled": {
            "type": "boolean"
          },
          "currentSnapshotStatus": {
            "type": "string",
            "enum": [
              "RUNNING",
              "FAILED",
              "CANCELLED",
              "SUCCESSFUL",
              "NOT_FOUND"
            ]
          }
        },
        "required": [
          "currentSnapshotStatus",
          "isCancelled"
        ]
      },
      "LaureateDto": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "motivation": {
            "type": "string"
          },
          "share": {
            "type": "string"
          }
        },
        "required": [
          "firstname",
          "id",
          "motivation",
          "share",
          "surname"
        ]
      },
      "Prize": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string"
          },
          "laureates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LaureateDto"
            }
          },
          "year": {
            "type": "string"
          }
        },
        "required": [
          "category",
          "laureates",
          "year"
        ],
        "xml": {
          "name": "prize"
        }
      },
      "EntityTransactionResponseUUID": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "format": "uuid"
          },
          "entityIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "required": [
          "entityIds"
        ]
      },
      "TechnicalUserCredentialsDto": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "The client identifier for the M2M client",
            "example": "abc523BCD",
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^[A-Za-z0-9]+$"
          },
          "client_secret": {
            "type": "string",
            "description": "The client secret for authentication",
            "example": "mySecretKey123",
            "maxLength": 255,
            "minLength": 8
          },
          "grant_type": {
            "type": "string",
            "description": "The OAuth2 grant type (must be 'client_credentials')",
            "enum": [
              "client_credentials"
            ],
            "example": "client_credentials"
          }
        },
        "required": [
          "client_id",
          "client_secret",
          "grant_type"
        ]
      },
      "ErrorResponseDto": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error codes from RFC 6749 Section 5.2 (OAuth 2.0 Error Response) identifying the type of error",
            "enum": [
              "invalid_request",
              "invalid_client",
              "invalid_grant",
              "unauthorized_client",
              "unsupported_grant_type",
              "invalid_scope"
            ],
            "example": "invalid_request"
          },
          "error_description": {
            "type": "string",
            "description": "Human-readable description of the error",
            "example": "The request is missing required parameters"
          },
          "error_uri": {
            "type": "string",
            "format": "uri",
            "description": "Optional URI to documentation about the error"
          }
        },
        "required": [
          "error",
          "error_description"
        ]
      },
      "FieldConfigDto": {
        "type": "object",
        "properties": {
          "fieldName": {
            "type": "string"
          },
          "fieldKey": {
            "type": "string"
          },
          "fieldCategory": {
            "type": "string"
          },
          "dataType": {
            "type": "string"
          },
          "isArray": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "flatten": {
            "type": "boolean"
          }
        },
        "required": [
          "dataType",
          "fieldCategory",
          "fieldKey",
          "fieldName",
          "hidden",
          "isArray"
        ]
      },
      "SchemaConfigDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "schemaName": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 1
          },
          "tables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TableConfigDto"
            }
          }
        },
        "required": [
          "schemaName",
          "tables"
        ]
      },
      "TableConfigDto": {
        "type": "object",
        "properties": {
          "tableName": {
            "type": "string"
          },
          "metadataClassId": {
            "type": "string",
            "format": "uuid"
          },
          "uniformedPath": {
            "type": "string"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldConfigDto"
            }
          },
          "hidden": {
            "type": "boolean"
          },
          "modelUpdateDate": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "fields",
          "hidden",
          "metadataClassId",
          "tableName",
          "uniformedPath"
        ]
      },
      "AbstractConditionDto": {
        "type": "object",
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ]
      },
      "JsonNode": {
        "type": "object"
      },
      "TokenResponseDto": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The JWT access token for API authentication",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "pattern": "^[A-Za-z0-9\\-_]+\\.[A-Za-z0-9\\-_]+\\.[A-Za-z0-9\\-_]+$"
          },
          "token_type": {
            "type": "string",
            "description": "The type of token issued (currently always 'Bearer')",
            "enum": [
              "Bearer"
            ],
            "example": "Bearer"
          },
          "expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "The lifetime in seconds of the access token",
            "example": 3600,
            "maximum": 86400,
            "minimum": 1
          },
          "refresh_token": {
            "type": "string",
            "description": "The refresh token for obtaining new access tokens",
            "example": "dGhpc2lzYXJlZnJlc2h0b2tlbg=="
          },
          "scope": {
            "type": "string",
            "description": "The scope of the access token, as per RFC 6749 Section 3.3. See https://datatracker.ietf.org/doc/html/rfc6749#section-3.3",
            "example": "ROLE_M2M"
          }
        },
        "required": [
          "access_token",
          "expires_in",
          "token_type"
        ]
      },
      "WorkflowImportRequestDto": {
        "type": "object",
        "description": "Workflow configurations to import",
        "properties": {
          "workflows": {
            "type": "array",
            "description": "Array of workflow configurations to import",
            "items": {
              "$ref": "#/components/schemas/JsonNode"
            }
          },
          "importMode": {
            "type": "string",
            "description": "Import mode for handling existing workflows",
            "enum": [
              "REPLACE",
              "ACTIVATE",
              "MERGE"
            ]
          }
        },
        "required": [
          "workflows"
        ]
      },
      "SnapshotStatusDto": {
        "type": "object",
        "properties": {
          "snapshotStatus": {
            "type": "string",
            "enum": [
              "RUNNING",
              "FAILED",
              "CANCELLED",
              "SUCCESSFUL",
              "NOT_FOUND"
            ]
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "entitiesCount": {
            "type": "integer",
            "format": "int64"
          },
          "calculationTimeMillis": {
            "type": "integer",
            "format": "int64"
          },
          "createTime": {
            "type": "string",
            "format": "date-time"
          },
          "finishTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "calculationTimeMillis",
          "createTime",
          "entitiesCount",
          "expirationDate",
          "snapshotStatus"
        ]
      },
      "WorkflowExportResponseDto": {
        "type": "object",
        "properties": {
          "entityName": {
            "type": "string",
            "description": "The name of the entity model"
          },
          "modelVersion": {
            "type": "integer",
            "format": "int32",
            "description": "The version number of the entity model"
          },
          "workflows": {
            "type": "array",
            "description": "Collection of workflow configurations for the entity model",
            "items": {
              "$ref": "#/components/schemas/JsonNode"
            }
          }
        },
        "required": [
          "entityName",
          "modelVersion",
          "workflows"
        ]
      },
      "EdgeMessageDto": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/EdgeMessageHeader"
          },
          "metaData": {
            "$ref": "#/components/schemas/EdgeMessageMetaData"
          },
          "content": {
            "type": "string"
          }
        },
        "required": [
          "header",
          "metaData"
        ]
      },
      "EdgeMessageHeader": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "contentLength": {
            "type": "integer",
            "format": "int64"
          },
          "contentEncoding": {
            "type": "string"
          },
          "messageId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "recipient": {
            "type": "string"
          },
          "replyTo": {
            "type": "string"
          },
          "correlationId": {
            "type": "string"
          }
        },
        "required": [
          "contentEncoding",
          "contentLength",
          "contentType",
          "subject"
        ]
      },
      "EdgeMessageMetaData": {
        "type": "object",
        "properties": {
          "values": {
            "$ref": "#/components/schemas/ValueMaps"
          },
          "indexedValues": {
            "$ref": "#/components/schemas/ValueMaps"
          }
        },
        "required": [
          "indexedValues",
          "values"
        ]
      },
      "LocalTime": {
        "type": "object",
        "properties": {
          "hour": {
            "type": "integer",
            "format": "int32"
          },
          "minute": {
            "type": "integer",
            "format": "int32"
          },
          "second": {
            "type": "integer",
            "format": "int32"
          },
          "nano": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ValueMaps": {
        "type": "object",
        "properties": {
          "strings": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "chars": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "doubles": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "floats": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "float"
            }
          },
          "bytes": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "byte"
            }
          },
          "shorts": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          },
          "longs": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          },
          "ints": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          },
          "localDates": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "date"
            }
          },
          "localDateTimes": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            }
          },
          "localTimes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/LocalTime"
            }
          },
          "zonedDateTimes": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            }
          },
          "years": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "integer",
                  "format": "int32"
                },
                "leap": {
                  "type": "boolean"
                }
              }
            }
          },
          "yearMonths": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "year": {
                  "type": "integer",
                  "format": "int32"
                },
                "month": {
                  "type": "string",
                  "enum": [
                    "JANUARY",
                    "FEBRUARY",
                    "MARCH",
                    "APRIL",
                    "MAY",
                    "JUNE",
                    "JULY",
                    "AUGUST",
                    "SEPTEMBER",
                    "OCTOBER",
                    "NOVEMBER",
                    "DECEMBER"
                  ]
                },
                "monthValue": {
                  "type": "integer",
                  "format": "int32"
                },
                "leapYear": {
                  "type": "boolean"
                }
              }
            }
          },
          "bigDecimals": {
            "type": "object",
            "additionalProperties": {
              "type": "number"
            }
          },
          "unboundDecimals": {
            "type": "object",
            "additionalProperties": {
              "type": "number"
            }
          },
          "bigIntegers": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "unboundIntegers": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "booleans": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "uuids": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "uuid"
            }
          },
          "timeuuids": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "uuid"
            }
          },
          "byteArrays": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "byte"
            }
          },
          "others": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "nulls": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "typeReferences": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "enum": [
                "STRING",
                "BYTE",
                "DOUBLE",
                "INTEGER",
                "BIG_DECIMAL",
                "UNBOUND_DECIMAL",
                "BIG_INTEGER",
                "UNBOUND_INTEGER",
                "BOOLEAN",
                "LOCAL_DATE",
                "LOCAL_DATE_TIME",
                "SHORT",
                "CHARACTER",
                "LONG",
                "FLOAT",
                "ZONED_DATE_TIME",
                "YEAR",
                "YEAR_MONTH",
                "LOCAL_TIME",
                "TIME_UUID_TYPE",
                "UUID_TYPE",
                "BYTE_ARRAY",
                "NULL",
                "OBJECT",
                "ARRAY",
                "ARRAY_ELEMENT",
                "TYPE_REFERENCE",
                "POLYMORPHIC"
              ]
            }
          }
        },
        "required": [
          "typeReferences"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "errorCode": {
            "type": "string",
            "enum": [
              "2",
              "10",
              "11"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TechnicalUserDto": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "The client identifier for the M2M client",
            "example": "abc523BCD",
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^[A-Za-z0-9]+$"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the M2M client was created",
            "example": "2023-04-21T10:02:27.88Z"
          },
          "lastUpdateDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the M2M client was last updated",
            "example": "2023-04-21T10:02:27.88Z"
          }
        },
        "required": [
          "clientId",
          "creationDate",
          "lastUpdateDate"
        ]
      },
      "LegalEntityInfoDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the legal entity"
          },
          "name": {
            "type": "string",
            "description": "Name of the legal entity"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "SubscriptionDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the subscription"
          },
          "legalEntityId": {
            "type": "string",
            "description": "Identifier for the associated legal entity"
          },
          "status": {
            "type": "string",
            "description": "Current status of the subscription"
          },
          "tierName": {
            "type": "string",
            "description": "Name of the subscription tier"
          },
          "periodFrom": {
            "type": "string",
            "format": "date-time",
            "description": "Start period of the subscription"
          },
          "limits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionLimitDto"
            }
          },
          "periodTo": {
            "type": "string",
            "format": "date-time",
            "description": "End period of the subscription"
          }
        },
        "required": [
          "id",
          "legalEntityId",
          "limits",
          "periodFrom",
          "status",
          "tierName"
        ]
      },
      "SubscriptionLimitDto": {
        "type": "object",
        "properties": {
          "entitlementId": {
            "type": "string",
            "description": "Unique identifier for the entitlement"
          },
          "cumulative": {
            "type": "boolean",
            "description": "Whether the limit is cumulative"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "The limit for this entitlement"
          },
          "timeIntervalBound": {
            "type": "string",
            "description": "The time interval bound for the entitlement",
            "enum": [
              "SECONDS",
              "MINUTES",
              "HOURS",
              "DAYS"
            ]
          }
        },
        "required": [
          "cumulative",
          "entitlementId",
          "limit"
        ]
      },
      "UserAccountInfoDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Unique identifier for the user"
          },
          "userName": {
            "type": "string",
            "description": "The name of the user"
          },
          "legalEntity": {
            "$ref": "#/components/schemas/LegalEntityInfoDto"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRoleDto"
            }
          },
          "currentSubscription": {
            "$ref": "#/components/schemas/SubscriptionDto"
          }
        },
        "required": [
          "legalEntity",
          "roles",
          "userId",
          "userName"
        ]
      },
      "UserAccountInfoResponseDto": {
        "type": "object",
        "properties": {
          "userAccountInfo": {
            "$ref": "#/components/schemas/UserAccountInfoDto"
          },
          "featureToggles": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "description": "A map of feature toggles with their values"
          }
        },
        "required": [
          "userAccountInfo"
        ]
      },
      "UserRoleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier for the role"
          },
          "desc": {
            "type": "string",
            "description": "Role description"
          }
        },
        "required": [
          "desc",
          "id"
        ]
      },
      "SubscriptionsResponseDto": {
        "type": "object",
        "properties": {
          "subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionDto"
            }
          }
        },
        "required": [
          "subscriptions"
        ]
      },
      "StreamDataDeleteResult": {
        "type": "object",
        "properties": {
          "numberOfEntitites": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfEntititesRemoved": {
            "type": "integer",
            "format": "int32"
          },
          "idToError": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "StreamDeleteResult": {
        "type": "object",
        "properties": {
          "entityModelClassId": {
            "type": "string",
            "format": "uuid"
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "deleteResult": {
            "$ref": "#/components/schemas/StreamDataDeleteResult"
          }
        },
        "required": [
          "deleteResult",
          "entityModelClassId"
        ]
      },
      "DeleteTechnicalUser200ResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Confirmation message",
            "example": "M2M client deleted successfully"
          },
          "clientId": {
            "type": "string",
            "description": "Client Id",
            "example": "abc523BCD"
          }
        },
        "required": [
          "clientId",
          "message"
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "name": "bearerAuth",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
