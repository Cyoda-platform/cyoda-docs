---
// Optimized Google Analytics component with conditional loading
// Only loads GA when user provides consent via cookie consent manager
---

<script>
  // Google Analytics with conditional loading and consent management
  (function() {
    // Only proceed if GA_MEASUREMENT_ID is available
    const GA_MEASUREMENT_ID = import.meta.env.GA_MEASUREMENT_ID;
    if (!GA_MEASUREMENT_ID) return;

    // Initialize dataLayer
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}

    // Set default consent to 'denied' until user provides consent
    gtag('consent', 'default', {
      'analytics_storage': 'denied'
    });

    // Function to load Google Analytics script
    function loadGoogleAnalytics() {
      // Check if already loaded
      if (window.gtag && window.gtag.loaded) return;

      // Load gtag script
      const script = document.createElement('script');
      script.async = true;
      script.src = `https://www.googletagmanager.com/gtag/js?id=${GA_MEASUREMENT_ID}`;
      document.head.appendChild(script);

      // Initialize GA
      gtag('js', new Date());
      gtag('config', GA_MEASUREMENT_ID, {
        anonymize_ip: true,
        allow_google_signals: false,
        allow_ad_personalization_signals: false
      });

      // Mark as loaded
      window.gtag.loaded = true;
    }

    // Listen for consent changes from cookie consent manager
    window.addEventListener('cc:onConsent', function(event) {
      const consent = event.detail;
      if (consent && consent.analytics) {
        // User consented to analytics
        gtag('consent', 'update', {
          'analytics_storage': 'granted'
        });
        
        // Load GA script if not already loaded
        if (typeof requestIdleCallback === 'function') {
          // Use requestIdleCallback for better performance
          requestIdleCallback(loadGoogleAnalytics, { timeout: 2000 });
        } else {
          // Fallback for browsers without requestIdleCallback
          setTimeout(loadGoogleAnalytics, 100);
        }
      } else {
        // User denied analytics
        gtag('consent', 'update', {
          'analytics_storage': 'denied'
        });
      }
    });

    // Also listen for the specific analytics consent event
    window.addEventListener('cc:onChange', function(event) {
      const consent = event.detail;
      if (consent && consent.analytics) {
        gtag('consent', 'update', {
          'analytics_storage': 'granted'
        });
        
        if (typeof requestIdleCallback === 'function') {
          requestIdleCallback(loadGoogleAnalytics, { timeout: 2000 });
        } else {
          setTimeout(loadGoogleAnalytics, 100);
        }
      }
    });

    // Check if user has already consented (for page reloads)
    // This integrates with the cookie consent manager's stored preferences
    if (typeof window !== 'undefined' && window.localStorage) {
      try {
        const ccConsent = localStorage.getItem('cc_cookie');
        if (ccConsent) {
          const consent = JSON.parse(ccConsent);
          if (consent && consent.categories && consent.categories.analytics) {
            gtag('consent', 'update', {
              'analytics_storage': 'granted'
            });
            
            if (typeof requestIdleCallback === 'function') {
              requestIdleCallback(loadGoogleAnalytics, { timeout: 2000 });
            } else {
              setTimeout(loadGoogleAnalytics, 100);
            }
          }
        }
      } catch (e) {
        // Ignore localStorage errors
      }
    }
  })();
</script>
