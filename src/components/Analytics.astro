---
// Optimized Google Analytics component with conditional loading
// Only loads GA when user provides consent via cookie consent manager
const GA_MEASUREMENT_ID = import.meta.env.GA_MEASUREMENT_ID;
---

<script define:vars={{ GA_MEASUREMENT_ID }}>
  // Google Analytics with conditional loading and consent management
  (function() {
    // Only proceed if GA_MEASUREMENT_ID is available
    if (!GA_MEASUREMENT_ID) return;

    // Initialize dataLayer
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}

    // Make gtag available globally
    window.gtag = gtag;

    // Set default consent to 'denied' until user provides consent
    gtag('consent', 'default', {
      'analytics_storage': 'denied'
    });

    // Function to load Google Analytics script
    function loadGoogleAnalytics() {
      // Check if already loaded
      if (window.gtag && window.gtag.loaded) return;

      // Load gtag script
      const script = document.createElement('script');
      script.async = true;
      script.src = `https://www.googletagmanager.com/gtag/js?id=${GA_MEASUREMENT_ID}`;
      document.head.appendChild(script);

      // Initialize GA
      gtag('js', new Date());
      gtag('config', GA_MEASUREMENT_ID, {
        anonymize_ip: true,
        allow_google_signals: false,
        allow_ad_personalization_signals: false
      });

      // Mark as loaded
      window.gtag.loaded = true;
    }

    // Function to handle analytics consent
    function handleAnalyticsConsent(granted) {
      if (granted) {
        // User consented to analytics
        gtag('consent', 'update', {
          'analytics_storage': 'granted'
        });

        // Load GA script if not already loaded
        if (typeof requestIdleCallback === 'function') {
          // Use requestIdleCallback for better performance
          requestIdleCallback(loadGoogleAnalytics, { timeout: 2000 });
        } else {
          // Fallback for browsers without requestIdleCallback
          setTimeout(loadGoogleAnalytics, 100);
        }
      } else {
        // User denied analytics
        gtag('consent', 'update', {
          'analytics_storage': 'denied'
        });
      }
    }

    // Make the function globally available for the cookie consent service callbacks
    window.handleAnalyticsConsent = handleAnalyticsConsent;
    console.log('üîß [GA Debug] handleAnalyticsConsent function registered');

    // Listen for vanilla-cookieconsent events
    document.addEventListener('cc:onConsent', (event) => {
      console.log('üéâ [GA Debug] cc:onConsent event fired', event.detail);
      if (window.CookieConsent?.acceptedCategory('analytics')) {
        console.log('‚úÖ [GA Debug] Analytics consent granted via event');
        handleAnalyticsConsent(true);
      } else {
        console.log('‚ùå [GA Debug] Analytics consent not granted via event');
        handleAnalyticsConsent(false);
      }
    });

    document.addEventListener('cc:onChange', (event) => {
      console.log('üîÑ [GA Debug] cc:onChange event fired', event.detail);
      if (window.CookieConsent?.acceptedCategory('analytics')) {
        console.log('‚úÖ [GA Debug] Analytics consent granted via change event');
        handleAnalyticsConsent(true);
      } else {
        console.log('‚ùå [GA Debug] Analytics consent revoked via change event');
        handleAnalyticsConsent(false);
      }
    });

    // Check if user has already consented (for page reloads)
    // This integrates with the cookie consent manager's stored preferences in localStorage
    function checkExistingConsent() {
      try {
        const ccConsent = localStorage.getItem('cc_cookie');
        if (ccConsent) {
          const consent = JSON.parse(ccConsent);
          console.log('üîç [GA Debug] Found consent data:', consent);

          // vanilla-cookieconsent always uses array format: ["necessary", "analytics"]
          if (consent && consent.categories && Array.isArray(consent.categories)) {
            const hasAnalyticsConsent = consent.categories.includes('analytics');
            console.log('üìã [GA Debug] Analytics consent:', hasAnalyticsConsent);

            if (hasAnalyticsConsent) {
              console.log('‚úÖ [GA Debug] Analytics consent already granted, loading GA');
              handleAnalyticsConsent(true);
              return true;
            }
          }
        }
      } catch (e) {
        console.log('‚ö†Ô∏è [GA Debug] Error reading consent:', e);
      }

      console.log('‚ùå [GA Debug] No analytics consent found');
      return false;
    }

    // Check for existing consent on page load
    checkExistingConsent();
  })();
</script>
