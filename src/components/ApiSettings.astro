---
// API Settings component - only contains API renderer selection
---

<div class="api-settings-dropdown">
  <button class="api-settings-button" aria-expanded="false" aria-haspopup="true">
    <svg class="settings-icon" width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
      <path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z"/>
      <path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z"/>
    </svg>
    <span>Settings</span>
    <svg class="dropdown-arrow" width="12" height="12" viewBox="0 0 12 12" fill="currentColor">
      <path d="M6 8.5L2.5 5h7L6 8.5z"/>
    </svg>
  </button>

  <div class="api-settings-menu" hidden>
    <div class="api-settings-header">
      <div class="api-settings-title">Settings</div>
      <button class="api-settings-close" aria-label="Close settings">
        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
          <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z"/>
        </svg>
      </button>
    </div>

    <div class="api-settings-section">
      <label class="api-settings-label">API Reference</label>
      <div class="api-settings-options">
        <button class="api-settings-option" data-api-renderer="scalar">
          <svg class="option-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
            <circle cx="9" cy="9" r="2"></circle>
            <path d="M21 15.5c-1.5-1.5-4-1.5-5.5 0"></path>
            <path d="M12 12l-2 2"></path>
          </svg>
          Scalar
        </button>
        <button class="api-settings-option" data-api-renderer="stoplight">
          <svg class="option-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="12" cy="12" r="10"></circle>
            <circle cx="12" cy="12" r="6"></circle>
            <circle cx="12" cy="12" r="2"></circle>
          </svg>
          Stoplight
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  .api-settings-dropdown {
    position: relative;
  }

  .api-settings-button {
    color: #6b7280;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 0.375rem;
    transition: all 0.2s ease;
    font-size: 0.875rem;
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .api-settings-button:hover,
  .api-settings-button:focus {
    color: #374151;
    background: #f3f4f6;
  }

  .api-settings-button[aria-expanded="true"] {
    color: #374151;
    background: #f3f4f6;
  }

  .dropdown-arrow {
    transition: transform 0.2s ease;
  }

  .api-settings-button[aria-expanded="true"] .dropdown-arrow {
    transform: rotate(180deg);
  }

  .api-settings-menu {
    position: absolute;
    top: 100%;
    right: 0;
    margin-top: 0.5rem;
    background: #ffffff;
    border: 1px solid #e5e7eb;
    border-radius: 0.5rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    min-width: 200px;
    padding: 0.75rem;
    z-index: 1000;
  }

  .api-settings-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 0.75rem;
    padding-bottom: 0.75rem;
    border-bottom: 1px solid #e5e7eb;
  }

  .api-settings-title {
    font-weight: 600;
    color: #111827;
    font-size: 0.875rem;
  }

  .api-settings-close {
    background: none;
    border: none;
    color: #6b7280;
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 0.25rem;
    transition: all 0.2s ease;
  }

  .api-settings-close:hover,
  .api-settings-close:focus {
    color: #374151;
    background: #f3f4f6;
  }

  .api-settings-label {
    display: block;
    font-size: 0.75rem;
    font-weight: 600;
    color: #6b7280;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: 0.5rem;
  }

  .api-settings-options {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .api-settings-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: none;
    border: none;
    color: #374151;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 0.25rem;
    transition: all 0.2s ease;
    font-size: 0.875rem;
    text-align: left;
    width: 100%;
  }

  .api-settings-option:hover {
    background: #f3f4f6;
    color: #111827;
  }

  .api-settings-option.active {
    background: var(--cyoda-aqua-light, #e0f7f5);
    color: var(--cyoda-aqua, #4FB8B0);
  }
</style>

<script>
  // Inline settings manager to avoid ES module import issues in static builds
  const settingsManager = {
    getApiRenderer() {
      if (typeof localStorage === 'undefined') return 'scalar';
      return localStorage.getItem('cyoda-api-renderer') || 'scalar';
    },
    setApiRenderer(renderer) {
      if (typeof localStorage === 'undefined') return;
      localStorage.setItem('cyoda-api-renderer', renderer);
      // Dispatch custom event for API renderer change
      window.dispatchEvent(new CustomEvent('cyoda:settings-change', {
        detail: { setting: 'apiRenderer', value: renderer }
      }));
    }
  };

  class ApiSettingsDropdown {
    constructor(element) {
      this.element = element;
      this.button = element.querySelector('.api-settings-button');
      this.menu = element.querySelector('.api-settings-menu');
      this.closeButton = element.querySelector('.api-settings-close');
      this.options = element.querySelectorAll('.api-settings-option');

      this.init();
    }

    init() {
      this.button.addEventListener('click', () => this.toggle());
      this.closeButton.addEventListener('click', () => this.close());

      this.options.forEach(option => {
        option.addEventListener('click', (e) => this.handleOptionClick(e));
      });

      // Close on outside click
      document.addEventListener('click', (e) => {
        if (!this.element.contains(e.target)) {
          this.close();
        }
      });

      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !this.menu.hidden) {
          this.close();
        }
      });

      this.updateActiveStates();
    }

    toggle() {
      if (this.menu.hidden) {
        this.open();
      } else {
        this.close();
      }
    }

    open() {
      this.menu.hidden = false;
      this.button.setAttribute('aria-expanded', 'true');
      this.updateActiveStates();
    }

    close() {
      this.menu.hidden = true;
      this.button.setAttribute('aria-expanded', 'false');
    }

    handleOptionClick(e) {
      const option = e.currentTarget;
      const renderer = option.dataset.apiRenderer;

      if (renderer) {
        settingsManager.setApiRenderer(renderer);
        this.updateActiveStates();
        this.close();

        // Dispatch custom event for API renderer change
        window.dispatchEvent(new CustomEvent('cyoda:settings-change', {
          detail: { setting: 'apiRenderer', value: renderer }
        }));
      }
    }

    updateActiveStates() {
      const currentRenderer = settingsManager.getApiRenderer();

      this.options.forEach(option => {
        const renderer = option.dataset.apiRenderer;
        option.classList.toggle('active', renderer === currentRenderer);
      });
    }
  }

  // Initialize all API settings dropdowns
  document.addEventListener('DOMContentLoaded', () => {
    const dropdowns = document.querySelectorAll('.api-settings-dropdown');
    dropdowns.forEach(dropdown => new ApiSettingsDropdown(dropdown));
  });
</script>
